# üîç JARVIS AI 2025 - Stack de Monitoring Production-Ready
# Prometheus + Grafana + Alertmanager + Loki + Jaeger
# Monitoring complet avec m√©triques custom et tracing distribu√©

version: '3.8'

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
  # Connexion au r√©seau principal de JARVIS
  jarvis_network:
    external: true

volumes:
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "./monitoring/data/prometheus"
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "./monitoring/data/grafana"
  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "./monitoring/data/alertmanager"
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "./monitoring/data/loki"
  jaeger_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "./monitoring/data/jaeger"

services:
  # üìä Prometheus - Collecte de m√©triques
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: jarvis_prometheus
    ports:
      - "127.0.0.1:9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://localhost:9090'
      - '--log.level=info'
    volumes:
      - ./monitoring/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/config/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
      - jarvis_network
    restart: unless-stopped
    user: "65534:65534"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # üìà Grafana - Dashboards et visualisation
  grafana:
    image: grafana/grafana:10.2.3
    container_name: jarvis_grafana
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-jarvis2025!}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_DATABASE_TYPE=sqlite3
      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db
      - GF_SESSION_PROVIDER=file
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    user: "472:0"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # üö® Alertmanager - Gestion des alertes
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: jarvis_alertmanager
    ports:
      - "127.0.0.1:9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
      - '--cluster.listen-address=0.0.0.0:9094'
      - '--log.level=info'
    volumes:
      - ./monitoring/config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring
    restart: unless-stopped
    user: "65534:65534"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìù Loki - Agr√©gation de logs
  loki:
    image: grafana/loki:2.9.4
    container_name: jarvis_loki
    ports:
      - "127.0.0.1:3100:3100"
    command:
      - '-config.file=/etc/loki/local-config.yaml'
      - '-target=all'
    volumes:
      - ./monitoring/config/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - monitoring
      - jarvis_network
    restart: unless-stopped
    user: "10001:10001"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üì¶ Promtail - Agent de collecte de logs
  promtail:
    image: grafana/promtail:2.9.4
    container_name: jarvis_promtail
    command:
      - '-config.file=/etc/promtail/config.yml'
    volumes:
      - ./monitoring/config/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/jarvis:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
      - jarvis_network
    depends_on:
      - loki
    restart: unless-stopped
    user: "0:0"  # Root n√©cessaire pour acc√©der aux logs Docker
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # üîç Jaeger - Tracing distribu√©
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: jarvis_jaeger
    ports:
      - "127.0.0.1:16686:16686"  # Jaeger UI
      - "127.0.0.1:14268:14268"  # Jaeger collector HTTP
      - "127.0.0.1:14250:14250"  # Jaeger collector gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - jaeger_data:/badger
    networks:
      - monitoring
      - jarvis_network
    restart: unless-stopped
    user: "10001:10001"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìä Node Exporter - M√©triques syst√®me
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: jarvis_node_exporter
    ports:
      - "127.0.0.1:9100:9100"
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    volumes:
      - /:/host:ro,rslave
      - /sys:/host/sys:ro
      - /proc:/host/proc:ro
    networks:
      - monitoring
    restart: unless-stopped
    user: "65534:65534"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üê≥ cAdvisor - M√©triques containers
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: jarvis_cadvisor
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ‚ö° Redis Exporter - M√©triques Redis
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: jarvis_redis_exporter
    ports:
      - "127.0.0.1:9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - monitoring
      - jarvis_network
    restart: unless-stopped
    user: "59000:59000"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üóÑÔ∏è Postgres Exporter - M√©triques PostgreSQL
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: jarvis_postgres_exporter
    ports:
      - "127.0.0.1:9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-jarvis}:${POSTGRES_PASSWORD}@memory-db:5432/${POSTGRES_DB:-jarvis_memory}?sslmode=disable
    networks:
      - monitoring
      - jarvis_network
    restart: unless-stopped
    user: "65534:65534"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3