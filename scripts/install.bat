@echo off
REM ü™ü Script d'installation JARVIS pour Windows
setlocal enabledelayedexpansion

echo ü§ñ Installation JARVIS Phase 2 pour Windows
echo ============================================

REM Couleurs pour l'affichage (Windows 10+)
set "RED=[91m"
set "GREEN=[92m"
set "YELLOW=[93m"
set "BLUE=[94m"
set "NC=[0m"

REM Variables
set "ERRORS=0"
set "WARNINGS=0"

REM Fonctions utilitaires
:print_step
echo %BLUE%[INFO]%NC% %~1
goto :eof

:print_success
echo %GREEN%[SUCCESS]%NC% %~1
goto :eof

:print_warning
echo %YELLOW%[WARNING]%NC% %~1
set /a WARNINGS+=1
goto :eof

:print_error
echo %RED%[ERROR]%NC% %~1
set /a ERRORS+=1
goto :eof

REM V√©rification des commandes
:check_command
where %1 >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "%1 trouv√©"
    exit /b 0
) else (
    call :print_warning "%1 non trouv√©"
    exit /b 1
)

REM V√©rification de Python
:check_python
call :print_step "V√©rification de Python..."
call :check_command python
if %errorlevel% neq 0 (
    call :check_command python3
    if %errorlevel% neq 0 (
        call :print_error "Python non trouv√©. Installez Python 3.11+ depuis python.org"
        exit /b 1
    ) else (
        set "PYTHON_CMD=python3"
    )
) else (
    set "PYTHON_CMD=python"
)

REM V√©rifier la version de Python
%PYTHON_CMD% -c "import sys; exit(0 if sys.version_info >= (3, 11) else 1)"
if %errorlevel% neq 0 (
    call :print_error "Python 3.11+ requis"
    exit /b 1
)

call :print_success "Python OK"
exit /b 0

REM V√©rification de Node.js
:check_node
call :print_step "V√©rification de Node.js et npm..."
call :check_command node
if %errorlevel% neq 0 (
    call :print_warning "Node.js non trouv√© - interface web non disponible"
    call :print_warning "Installez Node.js depuis nodejs.org"
    exit /b 1
)

call :check_command npm
if %errorlevel% neq 0 (
    call :print_warning "npm non trouv√©"
    exit /b 1
)

call :print_success "Node.js et npm OK"
exit /b 0

REM Installation des d√©pendances Python avec Chocolatey (optionnel)
:install_chocolatey_deps
call :print_step "Installation des d√©pendances avec Chocolatey..."
call :check_command choco
if %errorlevel% neq 0 (
    call :print_warning "Chocolatey non trouv√© - installation manuelle requise"
    exit /b 1
)

choco install tesseract -y
call :print_success "Tesseract install√© via Chocolatey"
exit /b 0

REM Installation d'Ollama
:install_ollama
call :print_step "V√©rification d'Ollama..."
call :check_command ollama
if %errorlevel% equ 0 (
    call :print_success "Ollama d√©j√† install√©"
    goto :install_models
)

call :print_step "T√©l√©chargement et installation d'Ollama..."
REM T√©l√©charger Ollama pour Windows
powershell -Command "& {Invoke-WebRequest -Uri 'https://ollama.ai/download/windows' -OutFile 'ollama-windows.exe'}"
if exist ollama-windows.exe (
    call :print_step "Installation d'Ollama..."
    ollama-windows.exe /S
    del ollama-windows.exe
    
    REM Attendre qu'Ollama soit pr√™t
    timeout /t 10 /nobreak >nul
    
    call :check_command ollama
    if %errorlevel% equ 0 (
        call :print_success "Ollama install√© avec succ√®s"
    ) else (
        call :print_warning "Ollama install√© mais non disponible dans PATH"
    )
) else (
    call :print_warning "√âchec du t√©l√©chargement d'Ollama"
)

:install_models
call :print_step "Installation des mod√®les IA recommand√©s..."
ollama pull llama3.2:3b
ollama pull llava:7b
call :print_success "Mod√®les IA install√©s"
exit /b 0

REM Configuration de l'environnement Python
:setup_python_env
call :print_step "Configuration de l'environnement Python..."

REM Cr√©ation de l'environnement virtuel
if exist venv (
    call :print_success "Environnement virtuel existe d√©j√†"
) else (
    %PYTHON_CMD% -m venv venv
    if %errorlevel% neq 0 (
        call :print_error "√âchec cr√©ation environnement virtuel"
        exit /b 1
    )
    call :print_success "Environnement virtuel cr√©√©"
)

REM Activation de l'environnement
call venv\Scripts\activate.bat
if %errorlevel% neq 0 (
    call :print_error "√âchec activation environnement virtuel"
    exit /b 1
)

REM Mise √† jour de pip
python -m pip install --upgrade pip

REM Installation des d√©pendances
if exist requirements.txt (
    pip install -r requirements.txt
    if %errorlevel% neq 0 (
        call :print_error "√âchec installation d√©pendances Python"
        exit /b 1
    )
    call :print_success "D√©pendances Python install√©es"
) else (
    call :print_error "requirements.txt non trouv√©"
    exit /b 1
)

exit /b 0

REM Configuration de l'environnement Node.js
:setup_node_env
call :print_step "Configuration de l'environnement Node.js..."

if exist ui\package.json (
    cd ui
    npm install
    if %errorlevel% neq 0 (
        call :print_warning "√âchec installation d√©pendances Node.js"
        cd ..
        exit /b 1
    )
    cd ..
    call :print_success "D√©pendances Node.js install√©es"
) else (
    call :print_warning "Interface UI non trouv√©e"
)

exit /b 0

REM Configuration des fichiers
:setup_config
call :print_step "Configuration des fichiers..."

REM Cr√©ation des r√©pertoires
if not exist logs mkdir logs
if not exist memory mkdir memory
if not exist screenshots mkdir screenshots
if not exist temp mkdir temp

REM Configuration .env
if exist .env.example (
    if not exist .env (
        copy .env.example .env >nul
        call :print_success "Fichier .env cr√©√©"
    )
) else (
    call :print_warning ".env.example non trouv√©"
)

call :print_success "Configuration termin√©e"
exit /b 0

REM Tests
:run_tests
call :print_step "Lancement des tests d'int√©gration..."

call venv\Scripts\activate.bat
python start_jarvis.py --test

if %errorlevel% equ 0 (
    call :print_success "Tests r√©ussis"
) else (
    call :print_warning "Tests √©chou√©s - v√©rifiez la configuration"
)

exit /b 0

REM Fonction principale
:main
call :print_step "D√©but de l'installation JARVIS Phase 2"

REM V√©rifications
call :check_python
if %errorlevel% neq 0 exit /b 1

call :check_node
REM Continuer m√™me si Node.js n'est pas disponible

REM Essayer d'installer via Chocolatey
if "%SKIP_CHOCO%" neq "true" (
    call :install_chocolatey_deps
)

REM Installation d'Ollama
if "%SKIP_OLLAMA%" neq "true" (
    call :install_ollama
)

REM Configuration
call :setup_python_env
if %errorlevel% neq 0 exit /b 1

call :setup_node_env

call :setup_config

REM Tests
if "%SKIP_TESTS%" neq "true" (
    call :run_tests
)

REM R√©sum√©
echo.
echo üéâ Installation termin√©e !
echo.
echo Pour d√©marrer JARVIS :
echo   venv\Scripts\activate.bat
echo   python start_jarvis.py
echo.
echo Interfaces disponibles :
echo   ‚Ä¢ Interface web: http://localhost:3000
echo   ‚Ä¢ API: http://localhost:8000/api/docs
echo.

if %ERRORS% gtr 0 (
    echo %RED%‚ö†Ô∏è %ERRORS% erreur(s) d√©tect√©e(s)%NC%
    exit /b 1
) else if %WARNINGS% gtr 0 (
    echo %YELLOW%‚ö†Ô∏è %WARNINGS% avertissement(s)%NC%
    exit /b 0
) else (
    echo %GREEN%‚úÖ Installation r√©ussie sans erreurs%NC%
    exit /b 0
)

REM Gestion des arguments
:parse_args
if "%1"=="--skip-choco" (
    set "SKIP_CHOCO=true"
    shift
    goto :parse_args
)
if "%1"=="--skip-ollama" (
    set "SKIP_OLLAMA=true"
    shift
    goto :parse_args
)
if "%1"=="--skip-tests" (
    set "SKIP_TESTS=true"
    shift
    goto :parse_args
)
if "%1"=="--help" (
    echo Usage: %0 [options]
    echo.
    echo Options:
    echo   --skip-choco    Ignorer l'installation via Chocolatey
    echo   --skip-ollama   Ignorer l'installation d'Ollama
    echo   --skip-tests    Ignorer les tests d'int√©gration
    echo   --help          Afficher cette aide
    exit /b 0
)
if "%1" neq "" (
    call :print_error "Option inconnue: %1"
    exit /b 1
)

REM Point d'entr√©e
call :parse_args %*
call :main