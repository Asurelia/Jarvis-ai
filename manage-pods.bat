@echo off
REM ü§ñ JARVIS 2025 - Gestionnaire de Pods Windows
REM Gestion des services par pods ind√©pendants

setlocal enabledelayedexpansion

REM Couleurs (limit√©es sur Windows)
set "GREEN=[92m"
set "RED=[91m"
set "YELLOW=[93m"
set "BLUE=[94m"
set "PURPLE=[95m"
set "NC=[0m"

REM Configuration pods
set "POD_COUNT=4"
set "POD_1=ai:docker-compose.ai-pod.yml:üß†:AI Pod (Brain+Ollama+Memory)"
set "POD_2=audio:docker-compose.audio-pod.yml:üó£Ô∏è:Audio Pod (TTS+STT Processing)"
set "POD_3=control:docker-compose.control-pod.yml:üñ•Ô∏è:Control Pod (System+Terminal)"
set "POD_4=integration:docker-compose.integration-pod.yml:üîß:Integration Pod (MCP+UI+Autocomplete)"

REM Banner JARVIS
echo %BLUE%
echo     ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo     ‚ïë           ü§ñ JARVIS 2025              ‚ïë
echo     ‚ïë        Gestionnaire de Pods           ‚ïë
echo     ‚ïë      Architecture Microservices       ‚ïë
echo     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo %NC%

REM V√©rifier les pr√©requis
echo %BLUE%üîç V√©rification des pr√©requis...%NC%

docker --version >nul 2>&1
if errorlevel 1 (
    echo %RED%‚ùå Docker n'est pas install√© ou non accessible%NC%
    pause
    exit /b 1
)

docker-compose --version >nul 2>&1
if errorlevel 1 (
    docker compose version >nul 2>&1
    if errorlevel 1 (
        echo %RED%‚ùå Docker Compose n'est pas install√©%NC%
        pause
        exit /b 1
    )
)

echo %GREEN%‚úÖ Pr√©requis valid√©s%NC%

REM Traitement des arguments
set "COMMAND=%~1"
set "POD_NAME=%~2"

if "%COMMAND%"=="" set "COMMAND=help"
if "%COMMAND%"=="help" goto :help
if "%COMMAND%"=="--help" goto :help
if "%COMMAND%"=="-h" goto :help

if "%COMMAND%"=="start" goto :start
if "%COMMAND%"=="stop" goto :stop
if "%COMMAND%"=="restart" goto :restart
if "%COMMAND%"=="status" goto :status
if "%COMMAND%"=="logs" goto :logs
if "%COMMAND%"=="build" goto :build
if "%COMMAND%"=="clean" goto :clean
if "%COMMAND%"=="health" goto :health

echo %RED%‚ùå Commande inconnue: %COMMAND%%NC%
goto :help

:help
echo %YELLOW%Usage: manage-pods.bat [COMMAND] [POD]%NC%
echo.
echo Commands:
echo   start [pod]     D√©marrer un pod ou tous les pods
echo   stop [pod]      Arr√™ter un pod ou tous les pods
echo   restart [pod]   Red√©marrer un pod ou tous les pods
echo   status          Afficher l'√©tat de tous les pods
echo   logs [pod]      Afficher les logs d'un pod
echo   build [pod]     Rebuild un pod ou tous les pods
echo   clean           Nettoyer les ressources inutilis√©es
echo   health          V√©rifier la sant√© de tous les services
echo.
echo Pods disponibles:
echo   üß† ai           AI Pod (Brain+Ollama+Memory)
echo   üó£Ô∏è audio        Audio Pod (TTS+STT Processing)
echo   üñ•Ô∏è control      Control Pod (System+Terminal)
echo   üîß integration  Integration Pod (MCP+UI+Autocomplete)
echo.
echo Exemples:
echo   manage-pods.bat start ai           # D√©marrer seulement le pod IA
echo   manage-pods.bat start              # D√©marrer tous les pods
echo   manage-pods.bat logs audio         # Voir les logs du pod audio
echo   manage-pods.bat health             # V√©rifier la sant√©
pause
exit /b 0

:start
if "%POD_NAME%"=="" (
    echo %GREEN%üöÄ D√©marrage de tous les pods...%NC%
    call :start_pod ai
    call :start_pod audio
    call :start_pod control
    call :start_pod integration
    echo %GREEN%üéâ Tous les pods sont d√©marr√©s !%NC%
    echo.
    echo %YELLOW%üí° N'oubliez pas de d√©marrer le Voice Bridge:%NC%
    echo %BLUE%  cd local-interface ^&^& python voice-bridge.py%NC%
) else (
    call :start_pod %POD_NAME%
)
goto :end

:stop
if "%POD_NAME%"=="" (
    echo %YELLOW%‚èπÔ∏è Arr√™t de tous les pods...%NC%
    call :stop_pod ai
    call :stop_pod audio
    call :stop_pod control
    call :stop_pod integration
    echo %GREEN%‚úÖ Tous les pods sont arr√™t√©s%NC%
) else (
    call :stop_pod %POD_NAME%
)
goto :end

:restart
if "%POD_NAME%"=="" (
    echo %BLUE%üîÑ Red√©marrage de tous les pods...%NC%
    call :restart_pod ai
    call :restart_pod audio
    call :restart_pod control
    call :restart_pod integration
) else (
    call :restart_pod %POD_NAME%
)
goto :end

:status
echo %BLUE%üìä √âtat des pods JARVIS:%NC%
echo.
call :show_pod_status ai "üß†" "AI Pod (Brain+Ollama+Memory)"
call :show_pod_status audio "üó£Ô∏è" "Audio Pod (TTS+STT Processing)"
call :show_pod_status control "üñ•Ô∏è" "Control Pod (System+Terminal)"
call :show_pod_status integration "üîß" "Integration Pod (MCP+UI+Autocomplete)"
goto :end

:logs
if "%POD_NAME%"=="" (
    echo %RED%‚ùå Sp√©cifiez un pod pour voir les logs%NC%
    goto :help
)
call :show_logs %POD_NAME%
goto :end

:build
if "%POD_NAME%"=="" (
    echo %YELLOW%üî® Rebuild de tous les pods...%NC%
    call :build_pod ai
    call :build_pod audio
    call :build_pod control
    call :build_pod integration
) else (
    call :build_pod %POD_NAME%
)
goto :end

:clean
echo %YELLOW%üßπ Nettoyage des ressources Docker...%NC%
docker-compose -f docker-compose.ai-pod.yml down 2>nul
docker-compose -f docker-compose.audio-pod.yml down 2>nul
docker-compose -f docker-compose.control-pod.yml down 2>nul
docker-compose -f docker-compose.integration-pod.yml down 2>nul
docker system prune -f
docker volume prune -f
docker network prune -f
echo %GREEN%‚úÖ Nettoyage termin√©%NC%
goto :end

:health
echo %BLUE%üè• V√©rification de la sant√© des services:%NC%
echo.
call :check_service "üß† Brain API" "http://localhost:8080/health"
call :check_service "üó£Ô∏è TTS Service" "http://localhost:5002/health"
call :check_service "üé§ STT Service" "http://localhost:5003/health"
call :check_service "üñ•Ô∏è System Control" "http://localhost:5004/health"
call :check_service "üíª Terminal Service" "http://localhost:5005/health"
call :check_service "üîß MCP Gateway" "http://localhost:5006/health"
call :check_service "üß† Autocomplete" "http://localhost:5007/health"
call :check_service "ü§ñ Ollama" "http://localhost:11434/api/tags"
call :check_service "üé§ Voice Bridge" "http://localhost:3001/health"
call :check_service "üåê Frontend" "http://localhost:3000"
echo.
echo %BLUE%üí° Pour d√©marrer le Voice Bridge local:%NC%
echo %YELLOW%  cd local-interface ^&^& python voice-bridge.py%NC%
goto :end

REM Fonctions utilitaires
:start_pod
set "pod=%~1"
call :get_compose_file %pod%
if "%compose_file%"=="" (
    echo %RED%‚ùå Pod '%pod%' non trouv√©%NC%
    exit /b 1
)
echo %GREEN%üöÄ D√©marrage du pod %pod%...%NC%
docker-compose -f %compose_file% up -d
if errorlevel 1 (
    echo %RED%‚ùå √âchec du d√©marrage du pod %pod%%NC%
) else (
    echo %GREEN%‚úÖ Pod %pod% d√©marr√© avec succ√®s%NC%
)
exit /b 0

:stop_pod
set "pod=%~1"
call :get_compose_file %pod%
if "%compose_file%"=="" (
    echo %RED%‚ùå Pod '%pod%' non trouv√©%NC%
    exit /b 1
)
echo %YELLOW%‚èπÔ∏è Arr√™t du pod %pod%...%NC%
docker-compose -f %compose_file% down
if errorlevel 1 (
    echo %RED%‚ùå √âchec de l'arr√™t du pod %pod%%NC%
) else (
    echo %GREEN%‚úÖ Pod %pod% arr√™t√© avec succ√®s%NC%
)
exit /b 0

:restart_pod
set "pod=%~1"
echo %BLUE%üîÑ Red√©marrage du pod %pod%...%NC%
call :stop_pod %pod%
timeout /t 2 /nobreak >nul
call :start_pod %pod%
exit /b 0

:build_pod
set "pod=%~1"
call :get_compose_file %pod%
if "%compose_file%"=="" (
    echo %RED%‚ùå Pod '%pod%' non trouv√©%NC%
    exit /b 1
)
echo %YELLOW%üî® Rebuild du pod %pod%...%NC%
docker-compose -f %compose_file% down
docker-compose -f %compose_file% build --no-cache
docker-compose -f %compose_file% up -d
echo %GREEN%‚úÖ Rebuild du pod %pod% termin√©%NC%
exit /b 0

:show_pod_status
set "pod=%~1"
set "icon=%~2"
set "desc=%~3"
call :get_compose_file %pod%
echo %PURPLE%%icon% %pod% - %desc%%NC%
if exist %compose_file% (
    docker-compose -f %compose_file% ps 2>nul
    if errorlevel 1 (
        echo %YELLOW%  ‚è∏Ô∏è Aucun conteneur actif%NC%
    )
) else (
    echo %RED%  ‚ùå Fichier de configuration manquant%NC%
)
echo.
exit /b 0

:show_logs
set "pod=%~1"
call :get_compose_file %pod%
if "%compose_file%"=="" (
    echo %RED%‚ùå Pod '%pod%' non trouv√©%NC%
    exit /b 1
)
echo %BLUE%üìã Logs du pod %pod%:%NC%
docker-compose -f %compose_file% logs -f
exit /b 0

:check_service
set "service_name=%~1"
set "url=%~2"
curl -s -f "%url%" >nul 2>&1
if errorlevel 1 (
    echo %RED%‚ùå %service_name%%NC%
) else (
    echo %GREEN%‚úÖ %service_name%%NC%
)
exit /b 0

:get_compose_file
set "pod_name=%~1"
set "compose_file="
if "%pod_name%"=="ai" set "compose_file=docker-compose.ai-pod.yml"
if "%pod_name%"=="audio" set "compose_file=docker-compose.audio-pod.yml"
if "%pod_name%"=="control" set "compose_file=docker-compose.control-pod.yml"
if "%pod_name%"=="integration" set "compose_file=docker-compose.integration-pod.yml"
exit /b 0

:end
pause