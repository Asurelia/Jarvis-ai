[tool:pytest]
# üß™ Configuration pytest pour JARVIS AI
# Configuration pour tests backend Python

# R√©pertoires de tests
testpaths = tests/backend tests/security tests/integration

# Patterns de fichiers de tests
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# Marqueurs de tests
markers =
    unit: Tests unitaires rapides
    integration: Tests d'int√©gration avec services externes
    security: Tests de s√©curit√©
    slow: Tests lents (>30s)
    gpu: Tests n√©cessitant un GPU AMD
    network: Tests n√©cessitant une connexion r√©seau
    docker: Tests n√©cessitant Docker
    asyncio: Tests asynchrones
    persona: Tests sp√©cifiques aux personas
    tts: Tests du service TTS
    brain_api: Tests de l'API Brain
    authentication: Tests d'authentification
    injection: Tests d'injection
    performance: Tests de performance

# Plugins asyncio
asyncio_mode = auto

# Options de coverage
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --disable-warnings
    --cov=services
    --cov=core
    --cov=tools
    --cov-report=html:tests/reports/coverage-html
    --cov-report=xml:tests/reports/coverage.xml
    --cov-report=term-missing
    --cov-fail-under=80
    --junit-xml=tests/reports/junit.xml
    --html=tests/reports/report.html
    --self-contained-html

# Configuration de coverage
[coverage:run]
source = services, core, tools, api
omit = 
    */venv/*
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */node_modules/*
    */build/*
    */dist/*
    setup.py
    manage.py
    */conftest.py

[coverage:report]
# Pr√©cision des pourcentages
precision = 2

# Ignorer les fichiers avec 100% de couverture
skip_covered = False

# Lignes manquantes dans le rapport
show_missing = True

# Exclure des fichiers du rapport
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = tests/reports/coverage-html
title = JARVIS AI - Couverture de tests

[coverage:xml]
output = tests/reports/coverage.xml

# Configuration pour les tests lents
timeout = 300

# Variables d'environnement pour les tests
env = 
    TESTING=1
    JARVIS_ENV=test
    LOG_LEVEL=DEBUG
    DISABLE_OLLAMA=1
    DISABLE_EXTERNAL_APIS=1
    REDIS_URL=redis://localhost:6379/1
    DATABASE_URL=sqlite:///test.db
    SECRET_KEY=test-secret-key-for-testing-only
    JWT_SECRET=test-jwt-secret
    MOCK_GPU_STATS=1
    AMD_GPU_TEST_MODE=1

# Filtres pour ignorer certains warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning:pkg_resources
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*overflow encountered.*:RuntimeWarning
    ignore:.*Attempting to set identical low_memory.*:UserWarning

# Configuration logging pour les tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# R√©pertoire temporaire pour les tests
tmp_path_retention_count = 3
tmp_path_retention_policy = failed

# Configuration pour les tests parall√®les
# Usage: pytest -n auto
minversion = 6.0