#!/bin/bash
# ü§ñ JARVIS 2025 - Script de d√©marrage intelligent
# Usage: ./start-jarvis.sh [--dev|--prod|--build|--stop|--logs]

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Banner JARVIS
print_banner() {
    echo -e "${BLUE}"
    echo "    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "    ‚ïë           ü§ñ JARVIS 2025              ‚ïë"
    echo "    ‚ïë      Assistant IA Personnel          ‚ïë"
    echo "    ‚ïë     Architecture Microservices       ‚ïë"
    echo "    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Fonction d'aide
print_help() {
    echo -e "${YELLOW}Usage: ./start-jarvis.sh [OPTIONS]${NC}"
    echo ""
    echo "Options:"
    echo "  --dev      D√©marrage en mode d√©veloppement"
    echo "  --prod     D√©marrage en mode production (d√©faut)"
    echo "  --build    Rebuild tous les containers"
    echo "  --stop     Arr√™ter tous les services"
    echo "  --logs     Afficher les logs en temps r√©el"
    echo "  --status   V√©rifier l'√©tat des services"
    echo "  --help     Afficher cette aide"
}

# V√©rifier les pr√©requis
check_prerequisites() {
    echo -e "${BLUE}üîç V√©rification des pr√©requis...${NC}"
    
    # Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker n'est pas install√©${NC}"
        exit 1
    fi
    
    # Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose n'est pas install√©${NC}"
        exit 1
    fi
    
    # Fichier docker-compose.yml
    if [ ! -f "docker-compose.yml" ]; then
        echo -e "${RED}‚ùå docker-compose.yml introuvable${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Pr√©requis valid√©s${NC}"
}

# V√©rifier l'√©tat des services
check_services_status() {
    echo -e "${BLUE}üìä √âtat des services:${NC}"
    
    services=("brain-api" "ollama" "redis" "memory-db" "tts-service" "stt-service" "frontend")
    
    for service in "${services[@]}"; do
        if docker ps --format "table {{.Names}}" | grep -q "jarvis_$service\|jarvis-$service"; then
            echo -e "${GREEN}‚úÖ $service${NC}"
        else
            echo -e "${RED}‚ùå $service${NC}"
        fi
    done
}

# T√©l√©charger les mod√®les Ollama
setup_ollama_models() {
    echo -e "${YELLOW}ü§ñ Configuration des mod√®les Ollama...${NC}"
    
    # Attendre qu'Ollama soit pr√™t
    echo "Attente du d√©marrage d'Ollama..."
    sleep 30
    
    # Mod√®les essentiels pour 2025
    models=("llama3.1:8b" "mistral:7b" "qwen2.5-coder:7b")
    
    for model in "${models[@]}"; do
        echo -e "${BLUE}üì• T√©l√©chargement du mod√®le $model...${NC}"
        docker exec jarvis_ollama ollama pull "$model" || echo -e "${YELLOW}‚ö†Ô∏è  √âchec du t√©l√©chargement de $model${NC}"
    done
    
    echo -e "${GREEN}‚úÖ Mod√®les Ollama configur√©s${NC}"
}

# D√©marrage des services
start_services() {
    local mode=$1
    
    echo -e "${BLUE}üöÄ D√©marrage de JARVIS en mode $mode...${NC}"
    
    if [ "$mode" = "dev" ]; then
        docker-compose up -d
    else
        docker-compose up -d --remove-orphans
    fi
    
    echo -e "${GREEN}‚úÖ Services d√©marr√©s${NC}"
    
    # Configurer Ollama en arri√®re-plan
    setup_ollama_models &
    
    echo ""
    echo -e "${GREEN}üéâ JARVIS 2025 est maintenant actif !${NC}"
    echo ""
    echo -e "${YELLOW}üìã Acc√®s aux services:${NC}"
    echo "  üåê Frontend:    http://localhost:3000"
    echo "  üß† Brain API:   http://localhost:8080"
    echo "  üó£Ô∏è  TTS Service: http://localhost:5002"
    echo "  üé§ STT Service: http://localhost:5003"
    echo "  ü§ñ Ollama:      http://localhost:11434"
    echo "  üìä API Docs:    http://localhost:8080/docs"
    echo ""
    echo -e "${BLUE}üí° Commandes utiles:${NC}"
    echo "  ./start-jarvis.sh --logs     # Voir les logs"
    echo "  ./start-jarvis.sh --status   # √âtat des services"
    echo "  ./start-jarvis.sh --stop     # Arr√™ter JARVIS"
}

# Rebuild des containers
rebuild_services() {
    echo -e "${YELLOW}üî® Rebuild des containers...${NC}"
    docker-compose down
    docker-compose build --no-cache
    docker-compose up -d
    echo -e "${GREEN}‚úÖ Rebuild termin√©${NC}"
}

# Arr√™t des services
stop_services() {
    echo -e "${YELLOW}‚èπÔ∏è  Arr√™t de JARVIS...${NC}"
    docker-compose down
    echo -e "${GREEN}‚úÖ JARVIS arr√™t√©${NC}"
}

# Affichage des logs
show_logs() {
    echo -e "${BLUE}üìã Logs de JARVIS (Ctrl+C pour quitter):${NC}"
    docker-compose logs -f
}

# Main
main() {
    print_banner
    
    case "${1:-}" in
        --help|-h)
            print_help
            ;;
        --dev)
            check_prerequisites
            start_services "dev"
            ;;
        --prod|"")
            check_prerequisites
            start_services "prod"
            ;;
        --build)
            check_prerequisites
            rebuild_services
            ;;
        --stop)
            stop_services
            ;;
        --logs)
            show_logs
            ;;
        --status)
            check_services_status
            ;;
        *)
            echo -e "${RED}‚ùå Option inconnue: $1${NC}"
            print_help
            exit 1
            ;;
    esac
}

# Gestion des signaux
trap 'echo -e "\n${YELLOW}‚ö†Ô∏è  Interruption d√©tect√©e${NC}"; exit 1' INT TERM

# Ex√©cution
main "$@"