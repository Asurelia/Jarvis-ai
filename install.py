#!/usr/bin/env python3
"""
üõ†Ô∏è Script d'installation automatique JARVIS Phase 2
Installe et configure automatiquement tous les composants
"""

import os
import sys
import subprocess
import platform
import shutil
from pathlib import Path
from typing import Optional, List
import urllib.request
import zipfile
import json

class JarvisInstaller:
    """Installateur automatique pour JARVIS"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.architecture = platform.machine().lower()
        self.project_root = Path(__file__).parent
        self.python_executable = sys.executable
        self.errors = []
        self.warnings = []
        
        # Versions recommand√©es
        self.versions = {
            "python": "3.11.0",
            "node": "18.0.0",
            "npm": "9.0.0"
        }
    
    def print_banner(self):
        """Affiche la banni√®re d'installation"""
        print("""
    ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    üõ†Ô∏è  Installation Automatique JARVIS Phase 2
    """)
    
    def run_command(self, command: List[str], cwd: Optional[Path] = None, 
                   capture_output: bool = False, check: bool = True) -> subprocess.CompletedProcess:
        """Ex√©cute une commande avec gestion d'erreurs"""
        try:
            print(f"üîß Ex√©cution: {' '.join(command)}")
            
            result = subprocess.run(
                command,
                cwd=cwd or self.project_root,
                capture_output=capture_output,
                text=True,
                check=check
            )
            
            if capture_output and result.stdout:
                print(f"üì§ Sortie: {result.stdout.strip()}")
            
            return result
            
        except subprocess.CalledProcessError as e:
            error_msg = f"Erreur commande: {' '.join(command)}"
            if e.stderr:
                error_msg += f"\\n{e.stderr}"
            self.errors.append(error_msg)
            print(f"‚ùå {error_msg}")
            if check:
                raise
            return e
        except FileNotFoundError:
            error_msg = f"Commande non trouv√©e: {command[0]}"
            self.errors.append(error_msg)
            print(f"‚ùå {error_msg}")
            if check:
                raise
            return None
    
    def check_python_version(self) -> bool:
        """V√©rifie la version de Python"""
        print("üêç V√©rification de Python...")
        
        version = sys.version_info
        if version.major < 3 or (version.major == 3 and version.minor < 11):
            self.errors.append(f"Python 3.11+ requis, trouv√© {version.major}.{version.minor}")
            return False
        
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} OK")
        return True
    
    def check_node_npm(self) -> bool:
        """V√©rifie Node.js et npm"""
        print("üì¶ V√©rification de Node.js et npm...")
        
        try:
            # V√©rifier Node.js
            result = self.run_command(["node", "--version"], capture_output=True, check=False)
            if result and result.returncode == 0:
                node_version = result.stdout.strip()
                print(f"‚úÖ Node.js {node_version} trouv√©")
            else:
                self.warnings.append("Node.js non trouv√© - interface web non disponible")
                return False
            
            # V√©rifier npm
            result = self.run_command(["npm", "--version"], capture_output=True, check=False)
            if result and result.returncode == 0:
                npm_version = result.stdout.strip()
                print(f"‚úÖ npm {npm_version} trouv√©")
                return True
            else:
                self.warnings.append("npm non trouv√© - interface web non disponible")
                return False
                
        except Exception as e:
            self.warnings.append(f"Erreur v√©rification Node.js/npm: {e}")
            return False
    
    def check_ollama(self) -> bool:
        """V√©rifie Ollama"""
        print("ü§ñ V√©rification d'Ollama...")
        
        try:
            result = self.run_command(["ollama", "--version"], capture_output=True, check=False)
            if result and result.returncode == 0:
                print("‚úÖ Ollama trouv√©")
                
                # V√©rifier les mod√®les recommand√©s
                models_to_check = ["llama3.2:3b", "llava:7b"]
                for model in models_to_check:
                    result = self.run_command(["ollama", "list"], capture_output=True, check=False)
                    if result and model in result.stdout:
                        print(f"‚úÖ Mod√®le {model} disponible")
                    else:
                        print(f"‚ö†Ô∏è Mod√®le {model} non trouv√© - sera install√© plus tard")
                
                return True
            else:
                self.warnings.append("Ollama non trouv√© - certaines fonctionnalit√©s IA non disponibles")
                return False
                
        except Exception as e:
            self.warnings.append(f"Erreur v√©rification Ollama: {e}")
            return False
    
    def check_tesseract(self) -> bool:
        """V√©rifie Tesseract OCR"""
        print("üëÅÔ∏è V√©rification de Tesseract OCR...")
        
        try:
            result = self.run_command(["tesseract", "--version"], capture_output=True, check=False)
            if result and result.returncode == 0:
                print("‚úÖ Tesseract OCR trouv√©")
                return True
            else:
                self.warnings.append("Tesseract OCR non trouv√© - OCR non disponible")
                return False
                
        except Exception as e:
            self.warnings.append(f"Erreur v√©rification Tesseract: {e}")
            return False
    
    def create_virtual_environment(self) -> bool:
        """Cr√©e l'environnement virtuel Python"""
        print("üêç Cr√©ation de l'environnement virtuel...")
        
        venv_path = self.project_root / "venv"
        
        if venv_path.exists():
            print("‚úÖ Environnement virtuel existe d√©j√†")
            return True
        
        try:
            self.run_command([self.python_executable, "-m", "venv", "venv"])
            print("‚úÖ Environnement virtuel cr√©√©")
            return True
        except Exception as e:
            self.errors.append(f"Erreur cr√©ation environnement virtuel: {e}")
            return False
    
    def install_python_dependencies(self) -> bool:
        """Installe les d√©pendances Python"""
        print("üì¶ Installation des d√©pendances Python...")
        
        venv_path = self.project_root / "venv"
        
        if self.system == "windows":
            pip_executable = venv_path / "Scripts" / "pip.exe"
        else:
            pip_executable = venv_path / "bin" / "pip"
        
        if not pip_executable.exists():
            self.errors.append("pip non trouv√© dans l'environnement virtuel")
            return False
        
        try:
            # Mettre √† jour pip
            self.run_command([str(pip_executable), "install", "--upgrade", "pip"])
            
            # Installer les d√©pendances
            requirements_file = self.project_root / "requirements.txt"
            if requirements_file.exists():
                self.run_command([str(pip_executable), "install", "-r", str(requirements_file)])
                print("‚úÖ D√©pendances Python install√©es")
                return True
            else:
                self.errors.append("Fichier requirements.txt non trouv√©")
                return False
                
        except Exception as e:
            self.errors.append(f"Erreur installation d√©pendances Python: {e}")
            return False
    
    def install_node_dependencies(self) -> bool:
        """Installe les d√©pendances Node.js"""
        print("üì¶ Installation des d√©pendances Node.js...")
        
        ui_path = self.project_root / "ui"
        package_json = ui_path / "package.json"
        
        if not package_json.exists():
            self.warnings.append("package.json non trouv√© - interface web non disponible")
            return False
        
        try:
            self.run_command(["npm", "install"], cwd=ui_path)
            print("‚úÖ D√©pendances Node.js install√©es")
            return True
        except Exception as e:
            self.warnings.append(f"Erreur installation d√©pendances Node.js: {e}")
            return False
    
    def create_directories(self) -> bool:
        """Cr√©e les r√©pertoires n√©cessaires"""
        print("üìÅ Cr√©ation des r√©pertoires...")
        
        directories = [
            "logs",
            "memory",
            "memory/chroma",
            "screenshots",
            "exports",
            "temp"
        ]
        
        try:
            for directory in directories:
                dir_path = self.project_root / directory
                dir_path.mkdir(parents=True, exist_ok=True)
                print(f"‚úÖ R√©pertoire cr√©√©: {directory}")
            
            return True
        except Exception as e:
            self.errors.append(f"Erreur cr√©ation r√©pertoires: {e}")
            return False
    
    def setup_configuration(self) -> bool:
        """Configure les fichiers de configuration"""
        print("‚öôÔ∏è Configuration...")
        
        try:
            # Copier .env.example vers .env si n'existe pas
            env_example = self.project_root / ".env.example"
            env_file = self.project_root / ".env"
            
            if env_example.exists() and not env_file.exists():
                shutil.copy2(env_example, env_file)
                print("‚úÖ Fichier .env cr√©√© depuis .env.example")
            
            # Cr√©er gitignore si n√©cessaire
            gitignore = self.project_root / ".gitignore"
            if not gitignore.exists():
                gitignore_content = \"\"\"# JARVIS .gitignore
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Virtual environments
venv/
env/
ENV/

# JARVIS specific
.env
logs/
memory/
screenshots/
temp/
*.log

# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
\"\"\"
                with open(gitignore, "w", encoding="utf-8") as f:
                    f.write(gitignore_content)
                print("‚úÖ .gitignore cr√©√©")
            
            return True
        except Exception as e:
            self.errors.append(f"Erreur configuration: {e}")
            return False
    
    def run_tests(self) -> bool:
        """Lance les tests d'int√©gration"""
        print("üß™ Lancement des tests...")
        
        try:
            venv_path = self.project_root / "venv"
            
            if self.system == "windows":
                python_executable = venv_path / "Scripts" / "python.exe"
            else:
                python_executable = venv_path / "bin" / "python"
            
            if not python_executable.exists():
                python_executable = self.python_executable
            
            # Lancer les tests avec timeout
            result = self.run_command(
                [str(python_executable), "start_jarvis.py", "--test"],
                check=False
            )
            
            if result and result.returncode == 0:
                print("‚úÖ Tests d'int√©gration r√©ussis")
                return True
            else:
                self.warnings.append("Tests d'int√©gration √©chou√©s - v√©rifiez la configuration")
                return False
                
        except Exception as e:
            self.warnings.append(f"Erreur tests: {e}")
            return False
    
    def print_summary(self):
        """Affiche le r√©sum√© de l'installation"""
        print("\\n" + "="*60)
        print("üìã R√âSUM√â DE L'INSTALLATION")
        print("="*60)
        
        if not self.errors:
            print("üéâ Installation r√©ussie !")
            print("\\nüöÄ Pour d√©marrer JARVIS :")
            print("   python start_jarvis.py")
            print("\\nüåê Interfaces disponibles :")
            print("   ‚Ä¢ Interface web: http://localhost:3000")
            print("   ‚Ä¢ API: http://localhost:8000/api/docs")
            
            if self.warnings:
                print("\\n‚ö†Ô∏è Avertissements :")
                for warning in self.warnings:
                    print(f"   ‚Ä¢ {warning}")
        else:
            print("‚ùå Installation √©chou√©e")
            print("\\n‚ùå Erreurs :")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")
        
        if self.warnings and not self.errors:
            print("\\nüí° Installation partielle - certaines fonctionnalit√©s peuvent √™tre limit√©es")
    
    def install(self, run_tests: bool = True) -> bool:
        """Lance l'installation compl√®te"""
        self.print_banner()
        
        steps = [
            ("V√©rification Python", self.check_python_version),
            ("V√©rification Node.js/npm", self.check_node_npm),
            ("V√©rification Ollama", self.check_ollama),
            ("V√©rification Tesseract", self.check_tesseract),
            ("Cr√©ation environnement virtuel", self.create_virtual_environment),
            ("Installation d√©pendances Python", self.install_python_dependencies),
            ("Installation d√©pendances Node.js", self.install_node_dependencies),
            ("Cr√©ation r√©pertoires", self.create_directories),
            ("Configuration", self.setup_configuration),
        ]
        
        if run_tests:
            steps.append(("Tests d'int√©gration", self.run_tests))
        
        print(f"üîß D√©but de l'installation ({len(steps)} √©tapes)\\n")
        
        for i, (step_name, step_function) in enumerate(steps, 1):
            print(f"[{i}/{len(steps)}] {step_name}...")
            try:
                success = step_function()
                if success:
                    print(f"‚úÖ {step_name} termin√©\\n")
                else:
                    print(f"‚ö†Ô∏è {step_name} avec avertissements\\n")
            except Exception as e:
                print(f"‚ùå {step_name} √©chou√©: {e}\\n")
                self.errors.append(f"{step_name}: {e}")
        
        self.print_summary()
        return len(self.errors) == 0


def main():
    """Point d'entr√©e principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Installation automatique JARVIS Phase 2")
    parser.add_argument("--no-tests", action="store_true", help="Ignorer les tests d'int√©gration")
    parser.add_argument("--force", action="store_true", help="Forcer l'installation m√™me en cas d'erreurs")
    
    args = parser.parse_args()
    
    installer = JarvisInstaller()
    success = installer.install(run_tests=not args.no_tests)
    
    if success:
        print("\\nüéâ Installation termin√©e avec succ√®s !")
        print("\\nPour d√©marrer JARVIS :")
        print("  python start_jarvis.py")
        return 0
    else:
        if args.force:
            print("\\n‚ö†Ô∏è Installation forc√©e malgr√© les erreurs")
            return 0
        else:
            print("\\n‚ùå Installation √©chou√©e")
            print("\\nUtilisez --force pour ignorer les erreurs")
            return 1


if __name__ == "__main__":
    sys.exit(main())