# JARVIS AI - Production Hybrid Docker Compose
# GPT-OSS 20B Migration with Ollama Host Integration
# Optimized for production workloads with security hardening

version: '3.8'

networks:
  jarvis_frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
  
  jarvis_backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.23.0.0/16
  
  jarvis_data:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.24.0.0/16

volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${POSTGRES_DATA_PATH:-/opt/jarvis/data/postgres}"
  
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${REDIS_DATA_PATH:-/opt/jarvis/data/redis}"
  
  brain_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${BRAIN_DATA_PATH:-/opt/jarvis/data/brain}"
  
  audio_cache_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${AUDIO_CACHE_PATH:-/opt/jarvis/data/audio}"
  
  logs_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${LOGS_PATH:-/opt/jarvis/logs}"

services:
  # 🧠 Brain API - Production avec connexion Ollama Host externe
  brain-api:
    image: jarvis/brain-api:${JARVIS_VERSION:-latest}
    container_name: jarvis_brain_prod
    restart: unless-stopped
    ports:
      - "${BRAIN_API_PORT:-8080}:8080"
      - "${BRAIN_WEBSOCKET_PORT:-8081}:8081"
    environment:
      # Core configuration
      - NODE_ENV=production
      - JARVIS_ENV=production
      - DEBUG=false
      
      # External Ollama Host
      - OLLAMA_URL=${OLLAMA_HOST_URL:-http://ollama-host:11434}
      - OLLAMA_MODEL=jarvis-gpt-oss-20b
      - OLLAMA_TIMEOUT=120
      - OLLAMA_RETRY_COUNT=3
      - OLLAMA_HEALTH_CHECK_INTERVAL=30
      
      # Database connections
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-prod:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-prod:6379/0
      
      # Security
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - API_KEY=${JARVIS_API_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS_PROD}
      - RATE_LIMIT_REQUESTS_PER_MINUTE=1000
      
      # Performance optimizations
      - DB_POOL_SIZE=30
      - DB_MAX_OVERFLOW=50
      - REDIS_POOL_SIZE=100
      - WORKER_PROCESSES=${BRAIN_WORKERS:-4}
      - WORKER_CONNECTIONS=2000
      
      # Feature flags
      - ENABLE_CIRCUIT_BREAKERS=true
      - ENABLE_LLM_CACHE=true
      - ENABLE_METRICS=true
      - ENABLE_TRACING=true
      - ENABLE_HEALTH_CHECKS=true
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
      - ENABLE_ACCESS_LOGS=true
    
    volumes:
      - brain_data_prod:/app/data:rw
      - logs_prod:/app/logs:rw
      - /etc/ssl/certs:/etc/ssl/certs:ro
    
    networks:
      jarvis_frontend:
        ipv4_address: 172.22.0.10
      jarvis_backend:
        ipv4_address: 172.23.0.10
    
    depends_on:
      postgres-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
    
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
        window: 300s
    
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    labels:
      - "jarvis.service=brain-api"
      - "jarvis.tier=application"
      - "jarvis.environment=production"
      - "traefik.enable=true"
      - "traefik.http.routers.brain-api.rule=PathPrefix(`/api`)"
      - "traefik.http.services.brain-api.loadbalancer.server.port=8080"

  # 🗣️ TTS Service - Production optimisé
  tts-service:
    image: jarvis/tts-service:${JARVIS_VERSION:-latest}
    container_name: jarvis_tts_prod
    restart: unless-stopped
    ports:
      - "${TTS_PORT:-5002}:5002"
    environment:
      - TTS_MODEL=${TTS_MODEL:-tts_models/multilingual/multi-dataset/xtts_v2}
      - STREAMING_ENABLED=true
      - CHUNK_SIZE=2048
      - MAX_CONCURRENT_REQUESTS=10
      - CACHE_TTL=3600
      - ENABLE_GPU=${TTS_ENABLE_GPU:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    
    volumes:
      - audio_cache_prod:/app/cache:rw
      - logs_prod:/app/logs:rw
    
    networks:
      jarvis_backend:
        ipv4_address: 172.23.0.20
    
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '3.0'
        reservations:
          memory: 3G
          cpus: '2.0'
    
    security_opt:
      - no-new-privileges:true
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s

  # 🎤 STT Service - Production optimisé
  stt-service:
    image: jarvis/stt-service:${JARVIS_VERSION:-latest}
    container_name: jarvis_stt_prod
    restart: unless-stopped
    ports:
      - "${STT_PORT:-5003}:5003"
    environment:
      - STT_MODEL=${STT_MODEL:-openai/whisper-large-v3}
      - REALTIME_PROCESSING=true
      - VAD_ENABLED=true
      - BATCH_SIZE=8
      - MAX_CONCURRENT_REQUESTS=5
      - ENABLE_GPU=${STT_ENABLE_GPU:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    
    volumes:
      - audio_cache_prod:/app/cache:rw
      - logs_prod:/app/logs:rw
    
    networks:
      jarvis_backend:
        ipv4_address: 172.23.0.30
    
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    
    security_opt:
      - no-new-privileges:true
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s

  # 🗄️ PostgreSQL - Production avec haute disponibilité
  postgres-prod:
    image: pgvector/pgvector:pg16
    container_name: jarvis_postgres_prod
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --data-checksums
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_WALDIR=/var/lib/postgresql/wal
      
      # Performance tuning
      - POSTGRES_SHARED_BUFFERS=${POSTGRES_SHARED_BUFFERS:-1GB}
      - POSTGRES_EFFECTIVE_CACHE_SIZE=${POSTGRES_EFFECTIVE_CACHE_SIZE:-3GB}
      - POSTGRES_MAINTENANCE_WORK_MEM=${POSTGRES_MAINTENANCE_WORK_MEM:-256MB}
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
    
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init-prod:/docker-entrypoint-initdb.d:ro
      - ./database/postgresql-prod.conf:/etc/postgresql/postgresql.conf:ro
      - logs_prod:/var/log/postgresql:rw
    
    networks:
      jarvis_data:
        ipv4_address: 172.24.0.10
    
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    
    security_opt:
      - no-new-privileges:true
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c log_destination=stderr
      -c log_statement=mod
      -c log_min_duration_statement=1000

  # 🧮 Redis - Production avec clustering
  redis-prod:
    image: redis:7-alpine
    container_name: jarvis_redis_prod
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory ${REDIS_MAXMEMORY:-2gb}
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
      --tcp-keepalive 60
      --timeout 300
    
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_MAXMEMORY=${REDIS_MAXMEMORY:-2gb}
    
    volumes:
      - redis_data_prod:/data
      - logs_prod:/var/log/redis:rw
    
    networks:
      jarvis_data:
        ipv4_address: 172.24.0.20
    
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    
    security_opt:
      - no-new-privileges:true
    
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 📊 Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: jarvis_prometheus_prod
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    
    networks:
      jarvis_backend:
        ipv4_address: 172.23.0.90
    
    security_opt:
      - no-new-privileges:true

  # 📈 Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: jarvis_grafana_prod
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      jarvis_frontend:
        ipv4_address: 172.22.0.91
      jarvis_backend:
        ipv4_address: 172.23.0.91
    
    depends_on:
      - prometheus
    
    security_opt:
      - no-new-privileges:true

  # 🌐 Reverse Proxy - Traefik
  traefik:
    image: traefik:v3.0
    container_name: jarvis_traefik_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --log.level=${TRAEFIK_LOG_LEVEL:-INFO}
      - --accesslog=true
      - --metrics.prometheus=true
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
      - logs_prod:/var/log/traefik:rw
    
    networks:
      jarvis_frontend:
        ipv4_address: 172.22.0.100
    
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=false
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"

  # 🔍 Logging - Loki
  loki:
    image: grafana/loki:latest
    container_name: jarvis_loki_prod
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    
    networks:
      jarvis_backend:
        ipv4_address: 172.23.0.95

  # 📝 Log Shipping - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: jarvis_promtail_prod
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - logs_prod:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    
    command: -config.file=/etc/promtail/config.yml
    
    networks:
      jarvis_backend:
        ipv4_address: 172.23.0.96
    
    depends_on:
      - loki

volumes:
  prometheus_data:
  grafana_data:
  traefik_letsencrypt:
  loki_data: