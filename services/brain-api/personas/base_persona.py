"""
üé≠ Base Persona - Classe de base pour toutes les personnalit√©s IA
Architecture modulaire pour personnalisation comportementale
"""

from abc import ABC, abstractmethod
from dataclasses import dataclass, asdict
from typing import Dict, List, Optional, Any
from enum import Enum
import random


class ResponseStyle(Enum):
    """Styles de r√©ponse possibles"""
    FORMAL = "formal"
    CASUAL = "casual"
    TECHNICAL = "technical"
    FRIENDLY = "friendly"
    PROFESSIONAL = "professional"


class Priority(Enum):
    """Priorit√©s de comportement"""
    SECURITY = "security"
    EFFICIENCY = "efficiency"
    FRIENDLINESS = "friendliness"
    ACCURACY = "accuracy"
    CREATIVITY = "creativity"


@dataclass
class PersonalityTraits:
    """Traits de personnalit√© quantifi√©s (0.0 √† 1.0)"""
    formality: float = 0.5      # Niveau de formalit√©
    humor: float = 0.3          # Utilisation de l'humour
    proactivity: float = 0.6    # Tendance √† anticiper les besoins
    verbosity: float = 0.5      # Longueur des r√©ponses
    empathy: float = 0.4        # R√©actions √©motionnelles
    confidence: float = 0.7     # Assurance dans les r√©ponses
    
    def __post_init__(self):
        """Validation des valeurs entre 0 et 1"""
        for field_name, value in asdict(self).items():
            if not (0.0 <= value <= 1.0):
                raise ValueError(f"{field_name} doit √™tre entre 0.0 et 1.0, re√ßu: {value}")


@dataclass
class VoicePreferences:
    """Pr√©f√©rences vocales pour la synth√®se vocale"""
    pitch: float = 0.0          # Hauteur de voix (-1.0 √† 1.0)
    speed: float = 0.0          # Vitesse (-1.0 √† 1.0)
    volume: float = 0.8         # Volume (0.0 √† 1.0)
    emotion: str = "neutral"    # √âmotion de base
    accent: str = "american"    # Accent vocal


class BasePersona(ABC):
    """
    Classe de base abstraite pour toutes les personas IA
    D√©finit l'interface commune et les comportements de base
    """
    
    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description
        self.personality = self._define_personality()
        self.voice = self._define_voice_preferences()
        self.response_style = self._define_response_style()
        self.priorities = self._define_priorities()
        
        # Phrases typiques et expressions
        self.greetings = self._define_greetings()
        self.confirmations = self._define_confirmations() 
        self.thinking_phrases = self._define_thinking_phrases()
        self.error_responses = self._define_error_responses()
        self.farewells = self._define_farewells()
        
        # Comportements sp√©cifiques
        self.behavior_patterns = self._define_behavior_patterns()
    
    @abstractmethod
    def _define_personality(self) -> PersonalityTraits:
        """D√©finir les traits de personnalit√© sp√©cifiques"""
        pass
    
    @abstractmethod
    def _define_voice_preferences(self) -> VoicePreferences:
        """D√©finir les pr√©f√©rences vocales"""
        pass
    
    @abstractmethod
    def _define_response_style(self) -> ResponseStyle:
        """D√©finir le style de r√©ponse par d√©faut"""
        pass
    
    @abstractmethod
    def _define_priorities(self) -> List[Priority]:
        """D√©finir les priorit√©s comportementales"""
        pass
    
    @abstractmethod
    def _define_greetings(self) -> List[str]:
        """Phrases de salutation"""
        pass
    
    @abstractmethod
    def _define_confirmations(self) -> List[str]:
        """Phrases de confirmation"""
        pass
    
    @abstractmethod
    def _define_thinking_phrases(self) -> List[str]:
        """Phrases pendant la r√©flexion"""
        pass
    
    @abstractmethod
    def _define_error_responses(self) -> List[str]:
        """R√©ponses en cas d'erreur"""
        pass
    
    @abstractmethod
    def _define_farewells(self) -> List[str]:
        """Phrases d'au revoir"""
        pass
    
    def _define_behavior_patterns(self) -> Dict[str, Any]:
        """Patterns comportementaux par d√©faut (peut √™tre surcharg√©)"""
        return {
            "interrupt_threshold": 0.5,  # Seuil pour interrompre
            "context_memory": 10,        # Messages √† retenir
            "suggestion_frequency": 0.3,  # Fr√©quence de suggestions
            "explanation_detail": 0.7    # Niveau de d√©tail
        }
    
    def get_random_phrase(self, phrase_type: str) -> str:
        """Obtenir une phrase al√©atoire d'un type donn√©"""
        phrases = getattr(self, phrase_type, [])
        if phrases:
            return random.choice(phrases)
        return ""
    
    def format_response(self, content: str, context: Optional[Dict] = None) -> str:
        """
        Formater une r√©ponse selon la personnalit√©
        
        Args:
            content: Contenu de base de la r√©ponse
            context: Contexte additionnel (utilisateur, situation, etc.)
        
        Returns:
            R√©ponse format√©e selon la persona
        """
        # Ajouter un pr√©fixe selon la personnalit√©
        if self.personality.formality > 0.7:
            prefix = "Monsieur, " if context and context.get("user_title") else ""
        elif self.personality.formality < 0.3:
            prefix = ""
        else:
            prefix = ""
        
        # Ajuster la verbosit√©
        if self.personality.verbosity > 0.7:
            # Ajouter des d√©tails suppl√©mentaires
            if self.personality.confidence > 0.6:
                suffix = " Je suis confiant dans cette r√©ponse."
            else:
                suffix = " N'h√©sitez pas si vous avez des questions."
        elif self.personality.verbosity < 0.3:
            # R√©ponse plus concise
            content = self._make_concise(content)
            suffix = ""
        else:
            suffix = ""
        
        # Ajouter de l'humour si appropri√©
        if self.personality.humor > 0.6 and random.random() < 0.3:
            humor_touch = self._add_humor_touch(content, context)
            if humor_touch:
                content = humor_touch
        
        return f"{prefix}{content}{suffix}".strip()
    
    def _make_concise(self, content: str) -> str:
        """Rendre le contenu plus concis"""
        # Supprimer les phrases redondantes ou trop d√©taill√©es
        sentences = content.split('. ')
        if len(sentences) > 2:
            # Garder les phrases les plus importantes
            return '. '.join(sentences[:2]) + '.'
        return content
    
    def _add_humor_touch(self, content: str, context: Optional[Dict]) -> Optional[str]:
        """Ajouter une touche d'humour (peut √™tre surcharg√© par les sous-classes)"""
        return None
    
    def should_interrupt(self, confidence_score: float) -> bool:
        """D√©terminer si la persona devrait interrompre bas√© sur sa personnalit√©"""
        threshold = self.behavior_patterns.get("interrupt_threshold", 0.5)
        proactivity_factor = self.personality.proactivity
        
        # Ajuster le seuil selon la proactivit√©
        adjusted_threshold = threshold * (1 - proactivity_factor * 0.3)
        
        return confidence_score > adjusted_threshold
    
    def get_suggestion_probability(self) -> float:
        """Probabilit√© de faire une suggestion proactive"""
        base_freq = self.behavior_patterns.get("suggestion_frequency", 0.3)
        return base_freq * self.personality.proactivity
    
    def adapt_to_user_context(self, user_profile: Dict[str, Any]) -> Dict[str, Any]:
        """
        Adapter le comportement selon le profil utilisateur
        
        Args:
            user_profile: Profil utilisateur avec pr√©f√©rences
        
        Returns:
            Ajustements comportementaux temporaires
        """
        adjustments = {}
        
        # Adapter selon les pr√©f√©rences utilisateur
        if user_profile.get("prefers_concise"):
            adjustments["verbosity_modifier"] = -0.3
        
        if user_profile.get("technical_level") == "expert":
            adjustments["technical_detail"] = 0.9
        elif user_profile.get("technical_level") == "beginner":
            adjustments["technical_detail"] = 0.3
            adjustments["explanation_detail"] = 0.9
        
        if user_profile.get("interaction_style") == "formal":
            adjustments["formality_modifier"] = 0.2
        elif user_profile.get("interaction_style") == "casual":
            adjustments["formality_modifier"] = -0.2
        
        return adjustments
    
    def get_persona_info(self) -> Dict[str, Any]:
        """Obtenir les informations compl√®tes de la persona"""
        return {
            "name": self.name,
            "description": self.description,
            "personality": asdict(self.personality),
            "voice": asdict(self.voice),
            "response_style": self.response_style.value,
            "priorities": [p.value for p in self.priorities],
            "behavior_patterns": self.behavior_patterns,
            "sample_phrases": {
                "greeting": self.get_random_phrase("greetings"),
                "confirmation": self.get_random_phrase("confirmations"),
                "thinking": self.get_random_phrase("thinking_phrases"),
                "farewell": self.get_random_phrase("farewells")
            }
        }
    
    def __str__(self) -> str:
        return f"Persona({self.name}): {self.description}"
    
    def __repr__(self) -> str:
        return f"<{self.__class__.__name__}({self.name})>"