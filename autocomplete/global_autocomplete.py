"""
Syst√®me d'autocompl√©tion globale pour JARVIS
Fonctionne dans TOUTES les applications Windows avec hook clavier
"""
import asyncio
import time
import threading
from typing import Dict, List, Optional, Callable, Any
from dataclasses import dataclass, field
from collections import deque
import re
from loguru import logger

# Imports conditionnels pour Windows
try:
    import keyboard
    import win32gui
    import win32process
    import psutil
    WINDOWS_HOOKS_AVAILABLE = True
except ImportError as e:
    WINDOWS_HOOKS_AVAILABLE = False
    logger.warning(f"Hooks Windows non disponibles: {e}")

@dataclass
class TypingContext:
    """Contexte de frappe actuel"""
    current_text: str = ""
    cursor_position: int = 0
    app_name: str = ""
    window_title: str = ""
    field_type: str = "text"  # text, email, url, code, etc.
    language: str = "fr"
    last_update: float = field(default_factory=time.time)
    
    def reset(self):
        """Remet √† z√©ro le contexte"""
        self.current_text = ""
        self.cursor_position = 0
        self.last_update = time.time()

@dataclass
class AutocompleteConfig:
    """Configuration de l'autocompl√©tion"""
    enabled: bool = True
    min_chars: int = 3  # Minimum de caract√®res pour d√©clencher
    max_suggestions: int = 5
    debounce_delay: float = 0.3  # D√©lai avant d√©clenchement
    show_delay: float = 0.1  # D√©lai d'affichage
    auto_accept_threshold: float = 0.95  # Seuil d'acceptation automatique
    
    # Applications exclues
    excluded_apps: List[str] = field(default_factory=lambda: [
        "passwordmanager", "keypass", "bitwarden", "lastpass",
        "cmd.exe", "powershell.exe", "ssh.exe"
    ])
    
    # Types de champs sensibles
    sensitive_fields: List[str] = field(default_factory=lambda: [
        "password", "pin", "ssn", "credit", "card"
    ])

class TextBuffer:
    """Buffer intelligent pour le texte en cours de frappe"""
    
    def __init__(self, max_size: int = 1000):
        self.buffer = deque(maxlen=max_size)
        self.current_word = ""
        self.words_history = deque(maxlen=50)
    
    def add_character(self, char: str):
        """Ajoute un caract√®re au buffer"""
        self.buffer.append(char)
        
        if char.isalnum() or char in "_-":
            self.current_word += char
        else:
            if self.current_word:
                self.words_history.append(self.current_word)
                self.current_word = ""
    
    def remove_character(self):
        """Supprime le dernier caract√®re (backspace)"""
        if self.buffer:
            removed = self.buffer.pop()
            if self.current_word and removed.isalnum():
                self.current_word = self.current_word[:-1]
    
    def get_current_line(self) -> str:
        """R√©cup√®re la ligne actuelle"""
        text = "".join(self.buffer)
        lines = text.split('\n')
        return lines[-1] if lines else ""
    
    def get_context(self, length: int = 100) -> str:
        """R√©cup√®re le contexte r√©cent"""
        if len(self.buffer) <= length:
            return "".join(self.buffer)
        return "".join(list(self.buffer)[-length:])
    
    def get_word_at_cursor(self) -> str:
        """R√©cup√®re le mot en cours de frappe"""
        return self.current_word
    
    def clear(self):
        """Vide le buffer"""
        self.buffer.clear()
        self.current_word = ""

class AppContextDetector:
    """D√©tecteur de contexte d'application"""
    
    def __init__(self):
        self.current_app = ""
        self.current_window = ""
        self.field_patterns = {
            "email": [r"mail", r"email", r"@"],
            "url": [r"http", r"www\.", r"\.com", r"\.org"],
            "code": [r"\.py", r"\.js", r"\.html", r"function", r"class"],
            "search": [r"search", r"find", r"query"]
        }
    
    def detect_current_app(self) -> Dict[str, str]:
        """D√©tecte l'application et la fen√™tre actuelles"""
        if not WINDOWS_HOOKS_AVAILABLE:
            return {"app": "unknown", "window": "unknown"}
        
        try:
            # R√©cup√©rer la fen√™tre active
            hwnd = win32gui.GetForegroundWindow()
            window_title = win32gui.GetWindowText(hwnd)
            
            # R√©cup√©rer le processus
            thread_id, process_id = win32process.GetWindowThreadProcessId(hwnd)
            process = psutil.Process(process_id)
            app_name = process.name()
            
            self.current_app = app_name
            self.current_window = window_title
            
            return {
                "app": app_name,
                "window": window_title,
                "process_id": process_id
            }
            
        except Exception as e:
            logger.debug(f"Erreur d√©tection app: {e}")
            return {"app": "unknown", "window": "unknown"}
    
    def detect_field_type(self, context: str) -> str:
        """D√©tecte le type de champ bas√© sur le contexte"""
        context_lower = context.lower()
        
        for field_type, patterns in self.field_patterns.items():
            for pattern in patterns:
                if re.search(pattern, context_lower):
                    return field_type
        
        return "text"
    
    def is_sensitive_context(self, context: str, window_title: str) -> bool:
        """V√©rifie si le contexte est sensible (mot de passe, etc.)"""
        sensitive_keywords = [
            "password", "passwd", "pin", "secret", "private",
            "credit", "card", "ssn", "social security"
        ]
        
        text_to_check = (context + " " + window_title).lower()
        
        return any(keyword in text_to_check for keyword in sensitive_keywords)

class GlobalKeyboardHook:
    """Hook clavier global pour capturer la frappe"""
    
    def __init__(self, autocomplete_system):
        self.autocomplete_system = autocomplete_system
        self.is_active = False
        self.hook_thread = None
        
    def start(self):
        """D√©marre le hook clavier"""
        if not WINDOWS_HOOKS_AVAILABLE:
            logger.error("‚ùå Hooks Windows non disponibles")
            return False
        
        if self.is_active:
            logger.warning("‚ö†Ô∏è Hook d√©j√† actif")
            return True
        
        try:
            self.is_active = True
            
            # Enregistrer les √©v√©nements clavier
            keyboard.on_press(self._on_key_press)
            keyboard.on_release(self._on_key_release)
            
            logger.success("‚úÖ Hook clavier global activ√©")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur activation hook: {e}")
            self.is_active = False
            return False
    
    def stop(self):
        """Arr√™te le hook clavier"""
        if self.is_active:
            try:
                keyboard.unhook_all()
                self.is_active = False
                logger.info("‚èπÔ∏è Hook clavier d√©sactiv√©")
            except Exception as e:
                logger.error(f"Erreur d√©sactivation hook: {e}")
    
    def _on_key_press(self, key):
        """Gestionnaire d'appui de touche"""
        try:
            # Traitement asynchrone pour √©viter de bloquer
            asyncio.create_task(self.autocomplete_system._handle_key_press(key))
        except Exception as e:
            logger.debug(f"Erreur traitement touche: {e}")
    
    def _on_key_release(self, key):
        """Gestionnaire de rel√¢chement de touche"""
        try:
            asyncio.create_task(self.autocomplete_system._handle_key_release(key))
        except Exception as e:
            logger.debug(f"Erreur traitement rel√¢chement: {e}")

class GlobalAutocomplete:
    """Syst√®me d'autocompl√©tion globale principal"""
    
    def __init__(self, config: AutocompleteConfig = None):
        self.config = config or AutocompleteConfig()
        self.typing_context = TypingContext()
        self.text_buffer = TextBuffer()
        self.app_detector = AppContextDetector()
        self.keyboard_hook = GlobalKeyboardHook(self)
        
        # √âtat du syst√®me
        self.is_active = False
        self.last_suggestion_time = 0.0
        self.current_suggestions: List[str] = []
        self.debounce_timer = None
        
        # Callbacks
        self.suggestion_callback: Optional[Callable] = None
        self.context_callback: Optional[Callable] = None
        
        # Statistiques
        self.stats = {
            "keys_processed": 0,
            "suggestions_generated": 0,
            "suggestions_accepted": 0,
            "contexts_detected": 0
        }
        
        logger.info("‚ö° Syst√®me d'autocompl√©tion globale initialis√©")
    
    async def initialize(self):
        """Initialise le syst√®me d'autocompl√©tion"""
        try:
            logger.info("üöÄ Initialisation de l'autocompl√©tion globale...")
            
            # V√©rifier les pr√©requis
            if not WINDOWS_HOOKS_AVAILABLE:
                logger.error("‚ùå Hooks Windows requis non disponibles")
                return False
            
            # D√©marrer le hook clavier
            if not self.keyboard_hook.start():
                logger.error("‚ùå Impossible de d√©marrer le hook clavier")
                return False
            
            self.is_active = True
            logger.success("‚úÖ Autocompl√©tion globale pr√™te")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation autocompl√©tion: {e}")
            return False
    
    async def _handle_key_press(self, key):
        """Traite l'appui d'une touche"""
        if not self.is_active or not self.config.enabled:
            return
        
        try:
            self.stats["keys_processed"] += 1
            
            # D√©tecter le contexte d'application
            app_context = self.app_detector.detect_current_app()
            app_name = app_context.get("app", "").lower()
            
            # V√©rifier si l'app est exclue
            if any(excluded in app_name for excluded in self.config.excluded_apps):
                return
            
            # Traiter diff√©rents types de touches
            if hasattr(key, 'char') and key.char:
                # Caract√®re normal
                await self._handle_character(key.char, app_context)
                
            elif key.name == 'backspace':
                await self._handle_backspace()
                
            elif key.name == 'space':
                await self._handle_space(app_context)
                
            elif key.name == 'enter':
                await self._handle_enter(app_context)
                
            elif key.name == 'tab':
                await self._handle_tab()
            
        except Exception as e:
            logger.debug(f"Erreur traitement touche: {e}")
    
    async def _handle_key_release(self, key):
        """Traite le rel√¢chement d'une touche"""
        # Pour l'instant, pas d'action sp√©cifique sur le rel√¢chement
        pass
    
    async def _handle_character(self, char: str, app_context: Dict[str, str]):
        """Traite un caract√®re normal"""
        # Ajouter au buffer
        self.text_buffer.add_character(char)
        
        # Mettre √† jour le contexte
        self.typing_context.current_text = self.text_buffer.get_current_line()
        self.typing_context.app_name = app_context.get("app", "")
        self.typing_context.window_title = app_context.get("window", "")
        self.typing_context.last_update = time.time()
        
        # D√©tecter le type de champ
        context_text = self.text_buffer.get_context()
        self.typing_context.field_type = self.app_detector.detect_field_type(context_text)
        
        # V√©rifier si c'est un contexte sensible
        if self.app_detector.is_sensitive_context(context_text, self.typing_context.window_title):
            logger.debug("üîí Contexte sensible d√©tect√© - autocompl√©tion d√©sactiv√©e")
            return
        
        # Programmer une suggestion avec debounce
        await self._schedule_suggestion()
    
    async def _handle_backspace(self):
        """Traite la suppression (backspace)"""
        self.text_buffer.remove_character()
        self.typing_context.current_text = self.text_buffer.get_current_line()
        
        # Programmer une nouvelle suggestion
        await self._schedule_suggestion()
    
    async def _handle_space(self, app_context: Dict[str, str]):
        """Traite l'espace (fin de mot)"""
        self.text_buffer.add_character(' ')
        
        # Le mot est termin√©, pas besoin de suggestion imm√©diate
        self.current_suggestions.clear()
    
    async def _handle_enter(self, app_context: Dict[str, str]):
        """Traite l'entr√©e (nouvelle ligne)"""
        self.text_buffer.add_character('\n')
        self.current_suggestions.clear()
    
    async def _handle_tab(self):
        """Traite la tabulation (accepter suggestion)"""
        if self.current_suggestions:
            # Accepter la premi√®re suggestion
            await self._accept_suggestion(self.current_suggestions[0])
    
    async def _schedule_suggestion(self):
        """Programme une suggestion avec debounce"""
        # Annuler le timer pr√©c√©dent
        if self.debounce_timer:
            self.debounce_timer.cancel()
        
        # Programmer une nouvelle suggestion
        self.debounce_timer = asyncio.create_task(
            self._debounced_suggestion()
        )
    
    async def _debounced_suggestion(self):
        """Suggestion avec d√©lai pour √©viter trop d'appels"""
        try:
            await asyncio.sleep(self.config.debounce_delay)
            await self._generate_suggestions()
        except asyncio.CancelledError:
            pass  # Timer annul√©, normal
    
    async def _generate_suggestions(self):
        """G√©n√®re les suggestions d'autocompl√©tion"""
        try:
            current_word = self.text_buffer.get_word_at_cursor()
            
            # V√©rifier les crit√®res minimums
            if len(current_word) < self.config.min_chars:
                self.current_suggestions.clear()
                return
            
            # Pr√©parer le contexte pour l'IA
            context = {
                "current_word": current_word,
                "current_line": self.typing_context.current_text,
                "context_text": self.text_buffer.get_context(),
                "app_name": self.typing_context.app_name,
                "window_title": self.typing_context.window_title,
                "field_type": self.typing_context.field_type,
                "language": self.typing_context.language
            }
            
            # G√©n√©rer suggestions via callback
            if self.suggestion_callback:
                suggestions = await self.suggestion_callback(context)
                
                if suggestions:
                    self.current_suggestions = suggestions[:self.config.max_suggestions]
                    self.stats["suggestions_generated"] += 1
                    
                    logger.debug(f"üí° {len(self.current_suggestions)} suggestions pour '{current_word}'")
                    
                    # Afficher les suggestions
                    await self._show_suggestions()
                else:
                    self.current_suggestions.clear()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration suggestions: {e}")
    
    async def _show_suggestions(self):
        """Affiche les suggestions √† l'utilisateur"""
        if not self.current_suggestions:
            return
        
        try:
            # Notifier le callback d'affichage
            if self.context_callback:
                await self.context_callback({
                    "action": "show_suggestions",
                    "suggestions": self.current_suggestions,
                    "context": self.typing_context
                })
            
            # Log pour debug
            logger.debug(f"üìã Suggestions: {self.current_suggestions}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur affichage suggestions: {e}")
    
    async def _accept_suggestion(self, suggestion: str):
        """Accepte une suggestion"""
        try:
            current_word = self.text_buffer.get_word_at_cursor()
            
            # Calculer le texte √† ins√©rer (compl√©tion seulement)
            if suggestion.startswith(current_word):
                completion = suggestion[len(current_word):]
            else:
                completion = suggestion
            
            # Simuler la frappe de la compl√©tion
            # NOTE: Dans un vrai syst√®me, il faudrait utiliser SendInput
            logger.info(f"‚úÖ Suggestion accept√©e: '{current_word}' -> '{suggestion}'")
            
            self.stats["suggestions_accepted"] += 1
            
            # Notifier l'acceptation
            if self.context_callback:
                await self.context_callback({
                    "action": "suggestion_accepted",
                    "original": current_word,
                    "suggestion": suggestion,
                    "completion": completion
                })
            
            # Nettoyer
            self.current_suggestions.clear()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur acceptation suggestion: {e}")
    
    def set_suggestion_callback(self, callback: Callable):
        """D√©finit le callback pour g√©n√©rer les suggestions"""
        self.suggestion_callback = callback
        logger.info("üí° Callback de suggestion configur√©")
    
    def set_context_callback(self, callback: Callable):
        """D√©finit le callback pour les notifications de contexte"""
        self.context_callback = callback
        logger.info("üìû Callback de contexte configur√©")
    
    def enable(self):
        """Active l'autocompl√©tion"""
        self.config.enabled = True
        logger.info("‚úÖ Autocompl√©tion activ√©e")
    
    def disable(self):
        """D√©sactive l'autocompl√©tion"""
        self.config.enabled = False
        self.current_suggestions.clear()
        logger.info("‚èπÔ∏è Autocompl√©tion d√©sactiv√©e")
    
    def add_excluded_app(self, app_name: str):
        """Ajoute une application aux exclusions"""
        self.config.excluded_apps.append(app_name.lower())
        logger.info(f"üö´ Application exclue: {app_name}")
    
    def remove_excluded_app(self, app_name: str):
        """Retire une application des exclusions"""
        try:
            self.config.excluded_apps.remove(app_name.lower())
            logger.info(f"‚úÖ Application autoris√©e: {app_name}")
        except ValueError:
            logger.warning(f"‚ö†Ô∏è Application non trouv√©e dans les exclusions: {app_name}")
    
    def get_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques du syst√®me"""
        stats = self.stats.copy()
        
        if stats["suggestions_generated"] > 0:
            stats["acceptance_rate"] = stats["suggestions_accepted"] / stats["suggestions_generated"]
        else:
            stats["acceptance_rate"] = 0.0
        
        stats.update({
            "is_active": self.is_active,
            "config": {
                "enabled": self.config.enabled,
                "min_chars": self.config.min_chars,
                "max_suggestions": self.config.max_suggestions,
                "excluded_apps": len(self.config.excluded_apps)
            },
            "current_context": {
                "app": self.typing_context.app_name,
                "field_type": self.typing_context.field_type,
                "current_word": self.text_buffer.get_word_at_cursor(),
                "suggestions_count": len(self.current_suggestions)
            }
        })
        
        return stats
    
    def reset_stats(self):
        """Remet √† z√©ro les statistiques"""
        self.stats = {
            "keys_processed": 0,
            "suggestions_generated": 0,
            "suggestions_accepted": 0,
            "contexts_detected": 0
        }
        logger.info("üìä Statistiques autocompl√©tion remises √† z√©ro")
    
    async def shutdown(self):
        """Arr√™te le syst√®me d'autocompl√©tion"""
        self.is_active = False
        self.keyboard_hook.stop()
        
        if self.debounce_timer:
            self.debounce_timer.cancel()
        
        logger.info("‚èπÔ∏è Syst√®me d'autocompl√©tion arr√™t√©")

# Fonctions utilitaires
async def test_global_autocomplete() -> bool:
    """Test du syst√®me d'autocompl√©tion globale"""
    try:
        autocomplete = GlobalAutocomplete()
        
        # Callback de test
        async def test_suggestion_callback(context):
            word = context["current_word"]
            
            # Suggestions de test
            suggestions = [
                f"{word}tion",
                f"{word}ment",
                f"{word}able",
                f"{word}ing",
                f"{word}ed"
            ]
            
            return [s for s in suggestions if len(s) > len(word)]
        
        async def test_context_callback(event):
            action = event["action"]
            if action == "show_suggestions":
                logger.info(f"üí° Suggestions: {event['suggestions']}")
            elif action == "suggestion_accepted":
                logger.info(f"‚úÖ Accept√©: {event['suggestion']}")
        
        # Configurer les callbacks
        autocomplete.set_suggestion_callback(test_suggestion_callback)
        autocomplete.set_context_callback(test_context_callback)
        
        # Initialiser
        if not await autocomplete.initialize():
            return False
        
        logger.info("üß™ Test autocompl√©tion globale d√©marr√©")
        logger.info("Tapez dans n'importe quelle application pour tester")
        logger.info("Ctrl+C pour arr√™ter")
        
        # Attendre l'arr√™t
        try:
            while autocomplete.is_active:
                await asyncio.sleep(1)
                
                # Afficher les stats p√©riodiquement
                if autocomplete.stats["keys_processed"] % 100 == 0 and autocomplete.stats["keys_processed"] > 0:
                    stats = autocomplete.get_stats()
                    logger.info(f"üìä {stats['keys_processed']} touches, {stats['suggestions_generated']} suggestions")
        
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Arr√™t demand√©")
        
        await autocomplete.shutdown()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test autocompl√©tion: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_global_autocomplete())