#!/usr/bin/env python3
"""
üîç JARVIS AI 2025 - Script d'ajout automatique d'instrumentation Prometheus
Script Python pour ajouter rapidement les m√©triques aux services manquants
"""

import os
import sys
from pathlib import Path

def add_prometheus_to_requirements(service_path):
    """Ajoute prometheus-client aux requirements.txt"""
    req_file = service_path / "requirements.txt"
    
    if not req_file.exists():
        print(f"‚ùå {req_file} n'existe pas")
        return False
    
    # Lire le contenu existant
    content = req_file.read_text()
    
    # V√©rifier si prometheus-client est d√©j√† pr√©sent
    if "prometheus-client" in content:
        print(f"‚úÖ prometheus-client d√©j√† pr√©sent dans {req_file}")
        return True
    
    # Ajouter les d√©pendances
    monitoring_deps = """
# Monitoring
prometheus-client==0.19.0
structlog==23.2.0
psutil==5.9.6
"""
    
    # Ajouter √† la fin
    new_content = content.rstrip() + monitoring_deps
    req_file.write_text(new_content)
    
    print(f"‚úÖ Ajout√© prometheus-client √† {req_file}")
    return True

def add_prometheus_imports(main_file):
    """Ajoute les imports Prometheus au main.py"""
    if not main_file.exists():
        print(f"‚ùå {main_file} n'existe pas")
        return False
    
    content = main_file.read_text()
    
    # V√©rifier si d√©j√† pr√©sent
    if "prometheus_client" in content:
        print(f"‚úÖ Imports Prometheus d√©j√† pr√©sents dans {main_file}")
        return True
    
    # Trouver la ligne d'import FastAPI
    lines = content.split('\n')
    fastapi_import_line = -1
    
    for i, line in enumerate(lines):
        if "from fastapi import" in line:
            fastapi_import_line = i
            break
    
    if fastapi_import_line == -1:
        print(f"‚ùå Import FastAPI non trouv√© dans {main_file}")
        return False
    
    # Ajouter Response √† l'import FastAPI
    if "Response" not in lines[fastapi_import_line]:
        lines[fastapi_import_line] = lines[fastapi_import_line].replace(
            "from fastapi import", 
            "from fastapi import Response,"
        ).replace(",Response,", ", Response,")
    
    # Ajouter les imports Prometheus apr√®s les imports FastAPI
    prometheus_imports = [
        "",
        "# Prometheus monitoring",
        "from prometheus_client import Counter, Histogram, Gauge, CollectorRegistry, generate_latest, CONTENT_TYPE_LATEST",
        "import structlog",
        "import psutil"
    ]
    
    # Ins√©rer apr√®s l'import FastAPI
    for i, imp in enumerate(reversed(prometheus_imports)):
        lines.insert(fastapi_import_line + 1, imp)
    
    main_file.write_text('\n'.join(lines))
    print(f"‚úÖ Ajout√© imports Prometheus √† {main_file}")
    return True

def add_metrics_definitions(main_file, service_name):
    """Ajoute les d√©finitions de m√©triques"""
    content = main_file.read_text()
    
    if "registry = CollectorRegistry()" in content:
        print(f"‚úÖ M√©triques d√©j√† d√©finies dans {main_file}")
        return True
    
    # Template de m√©triques
    metrics_template = f'''
# Prometheus metrics
registry = CollectorRegistry()

# M√©triques HTTP
http_requests = Counter(
    '{service_name.lower().replace("-", "_")}_http_requests_total',
    'Total HTTP requests',
    ['method', 'endpoint', 'status'],
    registry=registry
)

http_request_duration = Histogram(
    '{service_name.lower().replace("-", "_")}_http_request_duration_seconds',
    'HTTP request duration',
    ['method', 'endpoint'],
    registry=registry
)

# M√©triques de performance
memory_usage = Gauge(
    '{service_name.lower().replace("-", "_")}_memory_usage_bytes',
    'Memory usage in bytes',
    registry=registry
)

# M√©triques d'erreur
errors = Counter(
    '{service_name.lower().replace("-", "_")}_errors_total',
    'Total errors',
    ['error_type'],
    registry=registry
)
'''
    
    # Trouver o√π ins√©rer (apr√®s l'initialisation FastAPI)
    lines = content.split('\n')
    app_line = -1
    
    for i, line in enumerate(lines):
        if "app = FastAPI(" in line:
            app_line = i
            break
    
    if app_line == -1:
        print(f"‚ùå Initialisation FastAPI non trouv√©e dans {main_file}")
        return False
    
    # Trouver la fin de l'initialisation FastAPI
    end_app_line = app_line
    paren_count = 0
    in_app_init = False
    
    for i in range(app_line, len(lines)):
        line = lines[i]
        if "app = FastAPI(" in line:
            in_app_init = True
        
        if in_app_init:
            paren_count += line.count('(') - line.count(')')
            end_app_line = i
            if paren_count == 0:
                break
    
    # Ins√©rer les m√©triques apr√®s l'initialisation FastAPI
    metrics_lines = metrics_template.strip().split('\n')
    for i, metric_line in enumerate(reversed(metrics_lines)):
        lines.insert(end_app_line + 1, metric_line)
    
    main_file.write_text('\n'.join(lines))
    print(f"‚úÖ Ajout√© d√©finitions de m√©triques √† {main_file}")
    return True

def add_metrics_endpoint(main_file):
    """Ajoute l'endpoint /metrics"""
    content = main_file.read_text()
    
    if 'def get_metrics()' in content:
        print(f"‚úÖ Endpoint /metrics d√©j√† pr√©sent dans {main_file}")
        return True
    
    metrics_endpoint = '''
@app.get("/metrics")
async def get_metrics():
    """Endpoint Prometheus pour les m√©triques"""
    # Mise √† jour des m√©triques syst√®me
    process = psutil.Process()
    memory_usage.set(process.memory_info().rss)
    
    return Response(
        generate_latest(registry),
        media_type=CONTENT_TYPE_LATEST
    )
'''
    
    # Trouver l'endpoint /health pour ins√©rer apr√®s
    lines = content.split('\n')
    health_end = -1
    
    for i, line in enumerate(lines):
        if '/health' in line and '@app.get' in line:
            # Trouver la fin de cette fonction
            for j in range(i + 1, len(lines)):
                if lines[j].strip() and not lines[j].startswith(' ') and not lines[j].startswith('\t'):
                    health_end = j - 1
                    break
            break
    
    if health_end == -1:
        # Ajouter √† la fin du fichier
        content += metrics_endpoint
    else:
        # Ins√©rer apr√®s l'endpoint health
        endpoint_lines = metrics_endpoint.strip().split('\n')
        for i, endpoint_line in enumerate(reversed(endpoint_lines)):
            lines.insert(health_end + 1, endpoint_line)
        content = '\n'.join(lines)
    
    main_file.write_text(content)
    print(f"‚úÖ Ajout√© endpoint /metrics √† {main_file}")
    return True

def process_service(service_path, service_name):
    """Traite un service pour ajouter l'instrumentation Prometheus"""
    print(f"\nüîß Traitement du service: {service_name}")
    
    main_file = service_path / "main.py"
    
    # √âtapes d'instrumentation
    steps = [
        ("Ajout dependencies", lambda: add_prometheus_to_requirements(service_path)),
        ("Ajout imports", lambda: add_prometheus_imports(main_file)),
        ("Ajout m√©triques", lambda: add_metrics_definitions(main_file, service_name)),
        ("Ajout endpoint", lambda: add_metrics_endpoint(main_file))
    ]
    
    success = True
    for step_name, step_func in steps:
        print(f"  ‚è≥ {step_name}...")
        if not step_func():
            print(f"  ‚ùå √âchec: {step_name}")
            success = False
        else:
            print(f"  ‚úÖ {step_name}")
    
    return success

def main():
    """Fonction principale"""
    print("üîç JARVIS AI 2025 - Ajout automatique d'instrumentation Prometheus")
    print("=" * 70)
    
    # Services √† instrumenter
    services = [
        "terminal-service",
        "mcp-gateway", 
        "autocomplete-service"
    ]
    
    base_path = Path("services")
    
    if not base_path.exists():
        print("‚ùå R√©pertoire 'services' non trouv√©")
        sys.exit(1)
    
    success_count = 0
    
    for service in services:
        service_path = base_path / service
        
        if not service_path.exists():
            print(f"‚ö†Ô∏è Service {service} non trouv√© dans {service_path}")
            continue
        
        if process_service(service_path, service):
            success_count += 1
    
    print("\n" + "=" * 70)
    print(f"‚úÖ Instrumentation termin√©e: {success_count}/{len(services)} services trait√©s")
    
    if success_count == len(services):
        print("üéâ Tous les services ont √©t√© instrument√©s avec succ√®s!")
        print("\nüìã Prochaines √©tapes:")
        print("1. Reconstruire les images Docker des services modifi√©s")
        print("2. Red√©marrer les services avec docker-compose")
        print("3. V√©rifier les m√©triques sur http://localhost:9090")
        print("4. Consulter les dashboards Grafana sur http://localhost:3001")
    else:
        print("‚ö†Ô∏è Certains services n'ont pas pu √™tre trait√©s compl√®tement")
        print("V√©rifiez les messages d'erreur ci-dessus")

if __name__ == "__main__":
    main()