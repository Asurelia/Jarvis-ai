# Alembic configuration for JARVIS AI database migrations

[alembic]
# Template to use for generating migration scripts
script_location = migrations

# Template directory
file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s

# Timezone to use when rendering the date within the migration file
# as well as the filename.
timezone =

# Max length of characters to apply to the "slug" field
truncate_slug_length = 40

# Set to 'true' to run the environment during the 'revision' command,
# regardless of autogenerate
revision_environment = false

# Set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
sourceless = false

# Version path separator; As mentioned above, this is the character used to
# split version_locations
version_path_separator = :

# The output encoding used when revision files are written from script.py.mako
output_encoding = utf-8

# Database URL - will be overridden by environment variable
sqlalchemy.url = postgresql://jarvis:password@localhost:5432/jarvis_memory

[post_write_hooks]
# Post-write hooks define scripts or Python functions that are run
# after a migration script is generated
hooks = black,isort
black.type = console_scripts
black.entrypoint = black
black.options = REVISION_SCRIPT_FILENAME

isort.type = console_scripts
isort.entrypoint = isort
isort.options = REVISION_SCRIPT_FILENAME --profile black

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S