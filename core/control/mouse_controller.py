"""
Contr√¥leur de souris s√©curis√© pour JARVIS
Gestion des clics, d√©placements et glisser-d√©poser avec s√©curit√©
"""
import asyncio
import time
import random
from typing import Tuple, Optional, List, Dict, Any
from dataclasses import dataclass
from enum import Enum
import pyautogui
import numpy as np
from loguru import logger

# Configuration s√©curis√©e de pyautogui
pyautogui.FAILSAFE = True  # Coin sup√©rieur gauche pour arr√™t d'urgence
pyautogui.PAUSE = 0.1  # Pause entre chaque action

class MouseButton(Enum):
    LEFT = "left"
    RIGHT = "right"
    MIDDLE = "middle"

@dataclass
class MouseAction:
    """Repr√©sente une action de souris"""
    action_type: str  # "click", "move", "drag", "scroll"
    x: int
    y: int
    button: MouseButton = MouseButton.LEFT
    duration: float = 0.5
    clicks: int = 1
    scroll_amount: int = 0
    timestamp: float = 0.0
    
    def __post_init__(self):
        if self.timestamp == 0.0:
            self.timestamp = time.time()

class MouseSecurity:
    """Gestionnaire de s√©curit√© pour les actions de souris"""
    
    def __init__(self, sandbox_mode: bool = True):
        self.sandbox_mode = sandbox_mode
        self.action_count = 0
        self.last_reset = time.time()
        self.max_actions_per_minute = 120
        self.forbidden_zones: List[Tuple[int, int, int, int]] = []
        self.screen_bounds = self._get_screen_bounds()
        
        # Zones interdites par d√©faut (coin failsafe, zones syst√®me)
        self.add_forbidden_zone(0, 0, 100, 100)  # Coin failsafe
        
        logger.info(f"üõ°Ô∏è  S√©curit√© souris activ√©e (sandbox: {sandbox_mode})")
    
    def _get_screen_bounds(self) -> Tuple[int, int]:
        """R√©cup√®re les dimensions de l'√©cran"""
        try:
            return pyautogui.size()
        except Exception:
            return (1920, 1080)  # Valeur par d√©faut
    
    def add_forbidden_zone(self, x: int, y: int, width: int, height: int):
        """Ajoute une zone interdite"""
        self.forbidden_zones.append((x, y, x + width, y + height))
        logger.debug(f"Zone interdite ajout√©e: ({x}, {y}, {width}, {height})")
    
    def is_position_safe(self, x: int, y: int) -> bool:
        """V√©rifie si une position est s√©curis√©e"""
        # V√©rifier les limites de l'√©cran
        if not (0 <= x <= self.screen_bounds[0] and 0 <= y <= self.screen_bounds[1]):
            logger.warning(f"Position hors √©cran: ({x}, {y})")
            return False
        
        # V√©rifier les zones interdites
        for zone in self.forbidden_zones:
            x1, y1, x2, y2 = zone
            if x1 <= x <= x2 and y1 <= y <= y2:
                logger.warning(f"Position dans zone interdite: ({x}, {y})")
                return False
        
        return True
    
    def can_perform_action(self) -> bool:
        """V√©rifie si une action peut √™tre effectu√©e"""
        current_time = time.time()
        
        # Reset du compteur chaque minute
        if current_time - self.last_reset >= 60:
            self.action_count = 0
            self.last_reset = current_time
        
        if self.action_count >= self.max_actions_per_minute:
            logger.warning(f"Limite d'actions souris atteinte: {self.action_count}")
            return False
        
        self.action_count += 1
        return True
    
    def validate_action(self, action: MouseAction) -> bool:
        """Valide une action de souris avant ex√©cution"""
        if not self.can_perform_action():
            return False
        
        if not self.is_position_safe(action.x, action.y):
            return False
        
        # En mode sandbox, restrictions suppl√©mentaires
        if self.sandbox_mode:
            # Limiter les zones autoris√©es
            center_x, center_y = self.screen_bounds[0] // 2, self.screen_bounds[1] // 2
            max_distance = min(self.screen_bounds) // 3
            
            distance = ((action.x - center_x) ** 2 + (action.y - center_y) ** 2) ** 0.5
            if distance > max_distance:
                logger.warning(f"Action hors zone sandbox: distance {distance:.0f} > {max_distance}")
                return False
        
        return True

class HumanMouseSimulator:
    """Simule des mouvements de souris humains"""
    
    @staticmethod
    def generate_bezier_path(start: Tuple[int, int], end: Tuple[int, int], 
                           num_points: int = 20) -> List[Tuple[int, int]]:
        """G√©n√®re un chemin de B√©zier entre deux points"""
        x1, y1 = start
        x2, y2 = end
        
        # Points de contr√¥le al√©atoires pour un mouvement naturel
        ctrl1_x = x1 + random.randint(-50, 50)
        ctrl1_y = y1 + random.randint(-50, 50)
        ctrl2_x = x2 + random.randint(-50, 50)
        ctrl2_y = y2 + random.randint(-50, 50)
        
        path = []
        for i in range(num_points):
            t = i / (num_points - 1)
            
            # Courbe de B√©zier cubique
            x = (1-t)**3 * x1 + 3*(1-t)**2*t * ctrl1_x + 3*(1-t)*t**2 * ctrl2_x + t**3 * x2
            y = (1-t)**3 * y1 + 3*(1-t)**2*t * ctrl1_y + 3*(1-t)*t**2 * ctrl2_y + t**3 * y2
            
            path.append((int(x), int(y)))
        
        return path
    
    @staticmethod
    def add_mouse_jitter(x: int, y: int, jitter_amount: int = 2) -> Tuple[int, int]:
        """Ajoute un l√©ger tremblement naturel"""
        jitter_x = random.randint(-jitter_amount, jitter_amount)
        jitter_y = random.randint(-jitter_amount, jitter_amount)
        return (x + jitter_x, y + jitter_y)
    
    @staticmethod
    def calculate_move_duration(distance: float) -> float:
        """Calcule une dur√©e de mouvement r√©aliste bas√©e sur la distance"""
        # Loi de Fitts simplifi√©e pour le temps de mouvement
        min_duration = 0.1
        max_duration = 2.0
        
        # Plus c'est loin, plus c'est long (avec un maximum)
        duration = min_duration + (distance / 1000) * 0.5
        return min(duration, max_duration)

class MouseController:
    """Contr√¥leur principal de la souris"""
    
    def __init__(self, sandbox_mode: bool = True):
        self.security = MouseSecurity(sandbox_mode)
        self.simulator = HumanMouseSimulator()
        self.current_position = pyautogui.position()
        self.action_history: List[MouseAction] = []
        self.is_dragging = False
        
        logger.info("üñ±Ô∏è  Contr√¥leur de souris initialis√©")
    
    async def initialize(self):
        """Initialise le contr√¥leur"""
        try:
            # V√©rifier que pyautogui fonctionne
            self.current_position = pyautogui.position()
            logger.success("‚úÖ Contr√¥leur de souris pr√™t")
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation souris: {e}")
            raise
    
    async def move_to(self, x: int, y: int, duration: float = None, 
                     human_like: bool = True) -> bool:
        """D√©place la souris vers une position"""
        action = MouseAction("move", x, y, duration=duration or 0.5)
        
        if not self.security.validate_action(action):
            logger.warning(f"Action move_to refus√©e: ({x}, {y})")
            return False
        
        try:
            start_pos = self.current_position
            
            if human_like:
                # Mouvement humain avec courbe de B√©zier
                path = self.simulator.generate_bezier_path(start_pos, (x, y))
                
                # Calculer la dur√©e automatiquement si non sp√©cifi√©e
                if duration is None:
                    distance = ((x - start_pos[0])**2 + (y - start_pos[1])**2)**0.5
                    duration = self.simulator.calculate_move_duration(distance)
                
                # D√©placer le long du chemin
                step_duration = duration / len(path)
                
                for point in path:
                    jittered_point = self.simulator.add_mouse_jitter(*point)
                    pyautogui.moveTo(*jittered_point, duration=step_duration)
                    await asyncio.sleep(step_duration)
            
            else:
                # Mouvement direct
                pyautogui.moveTo(x, y, duration=duration)
                await asyncio.sleep(duration)
            
            self.current_position = (x, y)
            self.action_history.append(action)
            
            logger.debug(f"üñ±Ô∏è  Souris d√©plac√©e vers ({x}, {y})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©placement souris: {e}")
            return False
    
    async def click(self, x: Optional[int] = None, y: Optional[int] = None,
                   button: MouseButton = MouseButton.LEFT, clicks: int = 1,
                   interval: float = 0.1) -> bool:
        """Effectue un clic de souris"""
        # Utiliser la position actuelle si non sp√©cifi√©e
        if x is None or y is None:
            x, y = self.current_position
        
        action = MouseAction("click", x, y, button, clicks=clicks)
        
        if not self.security.validate_action(action):
            logger.warning(f"Action click refus√©e: ({x}, {y})")
            return False
        
        try:
            # D√©placer vers la position si n√©cessaire
            if (x, y) != self.current_position:
                await self.move_to(x, y)
            
            # Effectuer le clic
            pyautogui.click(x, y, clicks=clicks, interval=interval, button=button.value)
            
            self.action_history.append(action)
            logger.debug(f"üñ±Ô∏è  Clic {button.value} effectu√© √† ({x}, {y})")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur clic souris: {e}")
            return False
    
    async def double_click(self, x: Optional[int] = None, y: Optional[int] = None) -> bool:
        """Effectue un double-clic"""
        return await self.click(x, y, clicks=2, interval=0.05)
    
    async def right_click(self, x: Optional[int] = None, y: Optional[int] = None) -> bool:
        """Effectue un clic droit"""
        return await self.click(x, y, button=MouseButton.RIGHT)
    
    async def drag_to(self, start_x: int, start_y: int, end_x: int, end_y: int,
                     duration: float = 1.0, button: MouseButton = MouseButton.LEFT) -> bool:
        """Effectue un glisser-d√©poser"""
        start_action = MouseAction("drag_start", start_x, start_y, button, duration)
        end_action = MouseAction("drag_end", end_x, end_y, button, duration)
        
        if not (self.security.validate_action(start_action) and 
                self.security.validate_action(end_action)):
            logger.warning(f"Action drag refus√©e: ({start_x}, {start_y}) -> ({end_x}, {end_y})")
            return False
        
        try:
            # D√©placer vers le point de d√©part
            await self.move_to(start_x, start_y)
            
            # Commencer le glisser
            pyautogui.mouseDown(button=button.value)
            self.is_dragging = True
            
            # Attendre un peu
            await asyncio.sleep(0.1)
            
            # D√©placer vers la destination avec courbe humaine
            path = self.simulator.generate_bezier_path((start_x, start_y), (end_x, end_y))
            step_duration = duration / len(path)
            
            for point in path:
                jittered_point = self.simulator.add_mouse_jitter(*point)
                pyautogui.moveTo(*jittered_point, duration=step_duration)
                await asyncio.sleep(step_duration)
            
            # Rel√¢cher le bouton
            pyautogui.mouseUp(button=button.value)
            self.is_dragging = False
            
            self.current_position = (end_x, end_y)
            self.action_history.extend([start_action, end_action])
            
            logger.debug(f"üñ±Ô∏è  Glisser-d√©poser effectu√©: ({start_x}, {start_y}) -> ({end_x}, {end_y})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur glisser-d√©poser: {e}")
            # S'assurer que le bouton est rel√¢ch√© en cas d'erreur
            if self.is_dragging:
                pyautogui.mouseUp(button=button.value)
                self.is_dragging = False
            return False
    
    async def scroll(self, x: int, y: int, scroll_amount: int) -> bool:
        """Effectue un d√©filement"""
        action = MouseAction("scroll", x, y, scroll_amount=scroll_amount)
        
        if not self.security.validate_action(action):
            logger.warning(f"Action scroll refus√©e: ({x}, {y})")
            return False
        
        try:
            # D√©placer vers la position si n√©cessaire
            if (x, y) != self.current_position:
                await self.move_to(x, y)
            
            # Effectuer le d√©filement
            pyautogui.scroll(scroll_amount, x=x, y=y)
            
            self.action_history.append(action)
            logger.debug(f"üñ±Ô∏è  D√©filement effectu√© √† ({x}, {y}), amount: {scroll_amount}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©filement: {e}")
            return False
    
    async def hover(self, x: int, y: int, duration: float = 1.0) -> bool:
        """Survole une position pendant une dur√©e"""
        if await self.move_to(x, y):
            await asyncio.sleep(duration)
            logger.debug(f"üñ±Ô∏è  Survol effectu√© √† ({x}, {y}) pendant {duration}s")
            return True
        return False
    
    def get_position(self) -> Tuple[int, int]:
        """R√©cup√®re la position actuelle de la souris"""
        try:
            self.current_position = pyautogui.position()
            return self.current_position
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration position: {e}")
            return self.current_position
    
    def get_screen_size(self) -> Tuple[int, int]:
        """R√©cup√®re la taille de l'√©cran"""
        return self.security.screen_bounds
    
    def add_forbidden_zone(self, x: int, y: int, width: int, height: int):
        """Ajoute une zone interdite"""
        self.security.add_forbidden_zone(x, y, width, height)
    
    def get_action_history(self, limit: int = 50) -> List[MouseAction]:
        """R√©cup√®re l'historique des actions"""
        return self.action_history[-limit:]
    
    def clear_history(self):
        """Efface l'historique des actions"""
        self.action_history.clear()
        logger.debug("üìã Historique des actions souris effac√©")
    
    async def emergency_stop(self):
        """Arr√™t d'urgence - rel√¢che tous les boutons"""
        try:
            if self.is_dragging:
                pyautogui.mouseUp()
                self.is_dragging = False
            
            # D√©placer vers le coin failsafe
            pyautogui.moveTo(0, 0)
            logger.warning("üö® Arr√™t d'urgence souris activ√©")
            
        except Exception as e:
            logger.error(f"Erreur arr√™t d'urgence: {e}")

# Fonctions utilitaires
async def quick_click(x: int, y: int, button: str = "left") -> bool:
    """Clic rapide √† une position"""
    controller = MouseController()
    await controller.initialize()
    
    mouse_button = MouseButton(button)
    return await controller.click(x, y, mouse_button)

async def safe_drag(start_x: int, start_y: int, end_x: int, end_y: int) -> bool:
    """Glisser-d√©poser s√©curis√©"""
    controller = MouseController()
    await controller.initialize()
    
    return await controller.drag_to(start_x, start_y, end_x, end_y)

if __name__ == "__main__":
    async def test_mouse():
        controller = MouseController(sandbox_mode=True)
        await controller.initialize()
        
        # Test de d√©placement
        print("Test de d√©placement...")
        await controller.move_to(500, 300)
        
        # Test de clic
        print("Test de clic...")
        await controller.click()
        
        # Test de d√©filement
        print("Test de d√©filement...")
        await controller.scroll(500, 300, 3)
        
        print("‚úÖ Tests termin√©s")
    
    asyncio.run(test_mouse())